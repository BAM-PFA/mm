#!/bin/bash
#verifytree creates a temporary xml of package and compares against a set directory structure
#create temp xml of package and set xml, compare the two. xml starlet, temp has to exclude the tree.xml file in temp creation
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
unset DEPENDENCIES
DEPENDENCIES=(xml "${SCRIPTDIR}/removeDSStore")

#define _runtest function
_runtest(){
    LABEL="${1}"
    shift
    RUN_ERR=""
    XMLRESULT=$("${@}") #the result of the xpath statement
    RUN_ERR="${?}"
    if [[ "${RUN_ERR}" != 0 ]] ; then
        _report "${LABEL} #fail" #the error message associated with each xpath query
    _report -wts "Error: Running: \"${*}\" gave an Error Code - ${RUN_ERR}"
    echo "${XMLRESULT}"
    fi
    if [ ! -z "${XMLRESULT}" ] ; then
        _report "${LABEL}" #the error message associated with each xpath query
        _report "${XMLRESULT}"
    fi
}
#input the package
while [ "${*}" != "" ] ; do
#look for tree.xml
    PACKAGE="${1}"
    shift
    if [ -d "${PACKAGE}" ] ; then
        OUTPUTDIR="${PACKAGE}/metadata"
        MEDIAID=$(basename "${PACKAGE}")
        "${SCRIPTDIR}/removeDSStore" "${PACKAGE}"
            #make a new temp tree
            TEMPTREE=$(_maketemp)
            tree -DaNXs --du --timefmt "%Y-%m-%dT%H:%M:%SZ" -I "tree.xml" "${PACKAGE}" > "${TEMPTREE}"
            #if tree.xml exists, compare it to the specified xpath expressions of an AIP

            #searching for upper-level directories

            #looks for any directories that are not objects or metadata or tmp (for digitized materials)
            _runtest "There are directories that are not objects, metadata, and tmp in this package." xml sel -t -v "/tree/directory/directory[@name!='objects' and @name!='metadata' and @name!='tmp']/@name" -n "${TEMPTREE}"
            #looks for any unexpected files in the upper level metadata directory
            _runtest "There are files that do not belong in the metadata directory!" xml sel -t -v "/tree/directory/directory[@name='metadata']/file[@name!='checksum.md5' and @name!='checksumchecks.log' and @name!='dfxml.xml' and @name!='mets.xml']/@name" -n "${TEMPTREE}"
            #begin search of metadata subdirectories, looks for directories that do not belong
            _runtest "There are directories in the metadata directory that do not belong!" xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name!='depictions' and @name!='fileMeta' and @name!='logs']/@name" -n "${TEMPTREE}"
            #looks in logs directory for any files that aren't .log or .txt
            _runtest "There are files in the logs directory that do not belong!" xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='logs']/file[substring(@name,string-length(@name)-2)!='log' and substring(@name,string-length(@name)-2)!='txt']/@name" -n "${TEMPTREE}"
            #looks for any directories in fileMeta that are not objects
            _runtest "There are directories in fileMeta that are not objects." xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='fileMeta']/directory[@name!='objects']/@name" -n "${TEMPTREE}"
            #looks for any directories in fileMeta objects subdirectory that are not access and service
            _runtest "There are directories in the fileMeta objects directory that are not access or service." xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='fileMeta']/directory[@name='objects']/directory[@name!='access' and @name!='service']/@name" -n "${TEMPTREE}"
            #and any files that aren't .txt, .xml, .json
            _runtest "There are files in the fileMeta objects directory that do not belong!" xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='fileMeta']/directory[@name='objects']/file[substring(@name,string-length(@name)-2)!='xml' and substring(@name,string-length(@name)-2)!='txt' and substring(@name,string-length(@name)-3)!='json']/@name" -n "${TEMPTREE}"
            #looks in fileMeta service subdirectory for that aren't .txt, .xml, .json
            _runtest "There are files in the fileMeta service directory that do not belong!" xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='fileMeta']/directory[@name='objects']/directory[@name='service']/file[substring(@name,string-length(@name)-2)!='xml' and substring(@name,string-length(@name)-2)!='txt' and substring(@name,string-length(@name)-3)!='json']/@name" -n "${TEMPTREE}"
            #looks in fileMeta access for unexpected directories that are not dvd, mp3, podcast, and youtube_up
            _runtest "There are directories in the fileMeta access directory that do not belong!" xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='fileMeta']/directory[@name='objects']/directory[@name='access']/directory[@name!='dvd' and @name!='mp3' and @name!='podcast' and @name!='youtube_up']/@name" -n "${TEMPTREE}"
            #looks in all directories under access for unexpected metadata files-- files that aren't .txt, .xml, .json
            _runtest "There are unexpected metadata files in fileMeta access subdirectories!" xml sel -t -v "/tree/directory/directory[@name='metadata']/directory[@name='fileMeta']/directory[@name='objects']/directory[@name='access']/directory/file[substring(@name,string-length(@name)-2)!='xml' and substring(@name,string-length(@name)-2)!='txt' and substring(@name,string-length(@name)-3)!='json']/@name" -n "${TEMPTREE}"

            #begin search of objects

            #looks for any directories that are not access or service within the objects directory
            _runtest "There are directories other than access and service in the objects directory!" xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name!='access' and @name!='service']" -n "${TEMPTREE}"
            #looks for any directories within access directory that are not dvd, images, mp3, podcast, or youtube_up
            _runtest "There are unexpected directories in the access directory." xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='access']/directory[@name!='dvd' and @name!='images' and @name!='mp3' and @name!='podcast' and @name!='youtube_up']" -n "${TEMPTREE}"
            #looks for unexpected files in youtube_up dir
            _runtest "There are unexpected files in the youtube_up directory." xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='access']/directory[@name='youtube_up']/file[@name!='${MEDIAID}.mp4']/@name" -n  "${TEMPTREE}"
            #looks for unexpected files in dvd dir
            _runtest "There are unexpected files in the dvd directory." xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='access']/directory[@name='dvd']/file[@name!='${MEDIAID}.iso']/@name" -n  "${TEMPTREE}"
            #looks for unexpected files in images dir #how to deal with numbers after _ for tiffs - string/substring pattern matching
            #"Bad files here, yo!" xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='access']/directory[@name='images']/file[@name!='${MEDIAID}_3.tiff']/@name" -n  "${TEMPTREE}"
            #looks for unexpected files in mp3 dir
            _runtest "There are unexpected files in the mp3 directory." xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='access']/directory[@name='mp3']/file[@name!='${MEDIAID}.mp3']/@name" -n  "${TEMPTREE}"
            #looks for unexpected files in podcast dir
            _runtest "There are unexpected files in the podcast directory." xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='access']/directory[@name='podcast']/file[@name!='${MEDIAID}_podcast.mov']/@name" -n  "${TEMPTREE}"
            #looks for unexpected files in service dir
            _runtest "There are unexpected files in the service directory." xml sel -t -v "/tree/directory/directory[@name='objects']/directory[@name='service']/file[@name!='${MEDIAID}.mov']/@name" -n  "${TEMPTREE}"

            #find any empty files
            _runtest "There are empty files in your package!" xml sel -t -v "//file[@size='0']/@name" -n  "${TEMPTREE}"
    fi
done
