#!/bin/bash
# makelossless
version="1.0"
scriptdir=$(dirname $(which "$0"))
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};
dependencies=(ffmpeg mediainfo)
_initialize_make

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "This application will losslessly transcode a video file or package input with the following options."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) fileorpackage1 [ fileorpackage2 ...]"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -h display this help"
    echo
    exit
}
[ "${#}" = 0 ] && usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":nh" opt ; do
    case "${opt}" in
        n) DRYRUN=true;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    # get context about the input
    input="$1"
    [ -d "${input}" ] && logdir="${input}/metadata/submissionDocumentation/logs"
    [ -f "${input}" ] && logdir="$(dirname "${input}")/lossless/logs"
    [ ! "${logdir}" ] && logdir="${input}/metadata/submissionDocumentation/logs"

    find "${input}" -type f \( -iname "*.mov" -o -iname "*.avi" -o -iname "*.mxf" \) -print0 | while read -d $'\0' sourcefile ; do
        outputdir=$(dirname "${sourcefile}")
        sourcefilename=$(basename "${sourcefile}")
        
        _log -b 
        
        get_codectagstring "${sourcefile}"
        get_fieldorder "${sourcefile}"
        get_pix_fmt "${sourcefile}"
        _run mkdir -p "${outputdir}" "${logdir}"
        if [ "${codec_tag_string}" == "2vuy" -o "${codec_tag_string}" == "v210" ] ; then
            suffix="_ffv1"
            report -dt "${sourcefilename} is ${codec_tag_string} at ${fieldorder}, starting encode"
            export FFREPORT="file=${logdir}/%p_%t_makelossless${suffix}.log"
            _run_critical ffmpeg -nostdin -v warning -stats -vsync 0 -i "${sourcefile}" -map 0:v -map 0:a -map 0:s -c:v ffv1 -level 3 -vf setfield=bff -g 1 -c:a copy -c:s copy "${outputdir}/${sourcefilename%.*}${suffix}.mov" -f framemd5 -an "${logdir}/${sourcefilename%.*}.framemd5"
            if [ "${codec_tag_string}" == "2vuy" ] ; then
                _run_critical ffmpeg -nostdin -v warning -stats -i "${outputdir}/${sourcefilename%.*}${suffix}.mov" -f framemd5 -pix_fmt uyvy422 -an "${logdir}/${sourcefilename%.*}${suffix}.framemd5"
            else
                _run_critical ffmpeg -nostdin -v warning -stats -i "${outputdir}/${sourcefilename%.*}${suffix}.mov" -f framemd5 -an "${logdir}/${sourcefilename%.*}${suffix}.framemd5"
            fi 
            if [ $(grep -v "^#" "${logdir}/${sourcefilename%.*}.framemd5" | md5 -q) = $(grep -v "^#" "${logdir}/${sourcefilename%.*}${suffix}.framemd5" | md5 -q) ] ; then
                report -dt "Everything looks safe. Going to delete the original."
                _run_critical mediainfo -f --language=raw --output=XML "${sourcefile}" > "${logdir}/${sourcefilename%.*}_mediainfo.xml"
                _run_critical rm -f -v "${sourcefile}"
            else
                report -wt "Not looking safe. Going to keep the original."
            fi
        elif [ "${codec_tag_string}" == "FFV1" -a "${fieldorder}" == "progressive" ] ; then
            suffix="_bfffix"
            report -dt "${sourcefilename} is ${codec_tag_string} at ${fieldorder}, starting encode"
            export FFREPORT="file=${logdir}/%p_%t_makelossless${suffix}.log"
            
            if [ -f "${logdir}/${sourcefilename%.*}.framemd5" ] ; then
            _run_critical ffmpeg -nostdin -v warning -stats -vsync 0 -i "${sourcefile}" -map 0:v -map 0:a -map 0:s -c:v ffv1 -level 3 -vf setfield=bff -g 1 -c:a copy -c:s copy "${outputdir}/${sourcefilename%.*}${suffix}.mov"
            else
            if [ "${pixfmt}" == "yuv422p" ] ; then
            _run_critical ffmpeg -nostdin -v warning -stats -vsync 0 -i "${sourcefile}" -map 0:v -map 0:a -map 0:s -c:v ffv1 -level 3 -vf setfield=bff -g 1 -c:a copy -c:s copy "${outputdir}/${sourcefilename%.*}${suffix}.mov" -pix_fmt uyvy422 -f framemd5 -an "${logdir}/${sourcefilename%.*}.framemd5"
            elif [ "${pixfmt}" == "yuv422p10le" ] ; then
            _run_critical ffmpeg -nostdin -v warning -stats -vsync 0 -i "${sourcefile}" -map 0:v -map 0:a -map 0:s -c:v ffv1 -level 3 -vf setfield=bff -g 1 -c:a copy -c:s copy "${outputdir}/${sourcefilename%.*}${suffix}.mov" -f framemd5 -an "${logdir}/${sourcefilename%.*}.framemd5"
            else
                report -wt "uh oh unsupported"
            fi
            fi
            if [ "${pixfmt}" == "yuv422p" ] ; then
                _run_critical ffmpeg -nostdin -v warning -stats -i "${outputdir}/${sourcefilename%.*}${suffix}.mov" -f framemd5 -pix_fmt uyvy422 -an "${logdir}/${sourcefilename%.*}${suffix}.framemd5"
            elif [ "${pixfmt}" == "yuv422p10le" ] ; then                
                _run_critical ffmpeg -nostdin -v warning -stats -i "${outputdir}/${sourcefilename%.*}${suffix}.mov" -f framemd5 -an "${logdir}/${sourcefilename%.*}${suffix}.framemd5"
            else
                report -wt "uh oh unsupported"
            fi
            if [ $(grep -v "^#" "${logdir}/${sourcefilename%.*}.framemd5" | md5 -q) = $(grep -v "^#" "${logdir}/${sourcefilename%.*}${suffix}.framemd5" | md5 -q) ] ; then
                report -dt "Everything looks safe. Going to delete the original."
                _run_critical mediainfo -f --language=raw --output=XML "$sourcefile" > "${logdir}/${sourcefilename%.*}${suffix}_mediainfo.xml"
                _run_critical mv -f -v "${outputdir}/${sourcefilename%.*}${suffix}.mov" "${sourcefile}"
            else
                report -wt "Not looking safe. Going to keep the original."
            fi
        else
            report -wt "${sourcefilename} is not 2vuy or v210 or progressive ffv1, skipping"
            continue
        fi
        report -dt done with "${sourcefile}"
    done
    shift
    _log -e
done
