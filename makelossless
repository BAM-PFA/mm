#!/bin/bash
scriptdir=`dirname "$0"`
. "$scriptdir/variables"
. "$scriptdir/functions"
[ ! -f "$scriptdir/variables" -o ! -f "$scriptdir/functions" ] && { echo "Missing '$scriptdir/variables' and/or '$scriptdir/functions'. Exiting." ; exit 1 ;};
check_dependencies ffmpeg muxmovie mediainfo
while [ "$*" != "" ] ; do
	file="$1"
	filename=`basename "$file"`
	dirname=`dirname "$file"`
	
	[ "$#" != 0 ] && input="$1"
	[ -d "$input" ] && { outputdir="$input/objects" && logdir="$input/metadata/submissionDocumentation/logs" ;};
	[ -f "$input" ] && { outputdir=`dirname "$input"`"/service" && logdir="`dirname "$input"`/service/logs" ;};
	[ ! "$outputdir" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
	
	[ -d "$input" ] && sourcefile=`find "$1/objects" -maxdepth 1 -mindepth 1 -type f \( -name "*.mov" -o -name "*.mxf" -o -name "*.mp4" -o -name "*.dv" \) ! -name ".*"`
	[ -f "$input" ] && sourcefile="$input"
	
	get_codectagstring "$sourcefile"
	if [ "$codec_tag_string" == "2vuy" ] ; then
		echo "$filename is 2vuy, starting encode"
		export FFREPORT="file=${dirname}/%p_%t_convert-to-ffv1.log"
		ffmpeg -report -vsync 0 -i "$sourcefile" -map 0:v -map 0:a -c:v ffv1 -g 1 -c:a copy "${sourcefile%.*}_ffv1.mov" -f framemd5 -an "${sourcefile%.*}.framemd5"
		ffmpeg_ffv1_err="$?"
		[ "$ffmpeg_ffv1_err" -gt 0 ] && echo ffmpeg ended with error && exit 1
		ffmpeg -i "${sourcefile%.*}_ffv1.mov"  -f framemd5 -pix_fmt uyvy422 -an "${sourcefile%.*}_ffv1.framemd5"
		ffmpeg_md5_err="$?"
		[ "$ffmpeg_md5_err" -gt 0 ] && echo ffmpeg md5 ended with error && exit 1
		muxmovie "$sourcefile" -track "Timecode Track" -track "Closed Caption Track" -self-contained -o "${sourcefile%.*}_tc_e608.mov"
		muxmovie_err="$?"
		[ "$muxmovie_err" -gt 0 ] && echo muxmovie ended with error && exit 1
		if [ `md5 -q "${sourcefile%.*}.framemd5"` = `md5 -q "${sourcefile%.*}_ffv1.framemd5"` ] ; then
			echo Everything looks safe. Going to delete the original.
			mediainfo -f --language=raw --output=XML "$sourcefile" > "${sourcefile%.*}_mediainfo.xml"
			#rm -f -v "$sourcefile"
		else
			echo Not looking safe. Going to keep the original.
		fi
	elif [ "$codec_tag_string" == "v210" ] ; then
		echo "$filename is v210, starting encode"
		export FFREPORT="file=${dirname}/%p_%t_convert-to-ffv1.log"
		ffmpeg -report -vsync 0 -i "$sourcefile" -map 0:v -map 0:a -c:v ffv1 -g 1 -c:a copy "${sourcefile%.*}_ffv1.mov" -f framemd5 -an "${sourcefile%.*}.framemd5"
		ffmpeg_ffv1_err="$?"
		[ "$ffmpeg_ffv1_err" -gt 0 ] && echo ffmpeg ended with error && exit 1
		ffmpeg -i "${sourcefile%.*}_ffv1.mov"  -f framemd5 -an "${sourcefile%.*}_ffv1.framemd5"
		ffmpeg_md5_err="$?"
		[ "$ffmpeg_md5_err" -gt 0 ] && echo ffmpeg md5 ended with error && exit 1
		muxmovie "$sourcefile" -track "Timecode Track" -track "Closed Caption Track" -self-contained -o "${sourcefile%.*}_tc_e608.mov"
		muxmovie_err="$?"
		[ "$muxmovie_err" -gt 0 ] && echo muxmovie ended with error && exit 1
		if [ `md5 -q "${sourcefile%.*}.framemd5"` = `md5 -q "${sourcefile%.*}_ffv1.framemd5"` ] ; then
			echo Everything looks safe. Going to delete the original.
			mediainfo -f --language=raw --output=XML "$sourcefile" > "${sourcefile%.*}_mediainfo.xml"
			#rm -f -v "$sourcefile"
		else
			echo Not looking safe. Going to keep the original.
		fi
	else
		echo "$filename is not 2vuy or v210, quitting"
		exit 1
	fi
	echo done with "$sourcefile"
	shift
done
