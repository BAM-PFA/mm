get_iso8601(){
    date +%FT%T
}

get_iso8601_c(){
    date +%Y%m%d-%I%M%S
}

report(){
    echo `get_iso8601` - "${1}"
}

black_at_ends(){
    input_movie="$1"
    name=`basename "$input_movie"`
    analysis_head_seconds=10
    analysis_tail_seconds=10
    report "${GREEN}Analyzing $name for excessive black at head or tail.${NC}"
    duration=`ffprobe "$1"  -show_format 2> /dev/null | grep duration | cut -d= -f2 | cut -d. -f1`
    tail_start=`echo "$duration - $analysis_tail_seconds" | bc`
    head_black=`ffmpeg -t "$analysis_head_seconds" -i "$1" -an -vf blackdetect=pix_th=0.05 -loglevel debug -f null - 2>&1 | grep -c -o picture_black_ratio:1`
    report "${GREEN}Black frames in first $analysis_head_seconds seconds: $head_black.${NC}"
    tail_black=`ffmpeg -ss "$tail_start" -i "$1" -an -vf blackdetect=pix_th=0.05 -loglevel debug -f null - 2>&1 | grep -c -o picture_black_ratio:1`
    report "${GREEN}Black frames in last  $analysis_head_seconds seconds: $tail_black.${NC}"
}

maketemp(){
	tempfoo=`basename $0`
	TMPFILE=`mktemp -q /tmp/${tempfoo}.XXXXXX`
	if [ $? -ne 0 ]; then
		echo "$0: Can't create temp file, exiting..."
		exit 1
	fi
}

ask_operator(){
    if [ -z "$op" ] ; then
        printf "${BLUE}Enter the name of the operator or 'q' to quit: ${NC}"
        read op
	[ -z "$op" ] && ask_operator || log+="operator: ${op}\n" 
        [ "$op" == "q" ] && exit 0
    fi
}

ask_mediaid(){
    if [ -z "$mediaid" ] ; then
        printf "${BLUE}Enter a unique MEDIA ID: ${NC}"
        read mediaid
		[ -z "$mediaid" ] && ask_mediaid
        # option to quit
        [ "$mediaid" == "q" ] && exit 0
        # validate id and perhaps fail with exit
        [ -z "$mediaid" ] && report "${RED}ERROR You must enter a valid MEDIA ID${NC}" && exit
	[ ! -z `echo "$mediaid" | grep -v "^[A-Z0-9_-]*$"` ] && report "${RED}ERROR The MEDIA ID must only contain capital letters, letters, hyphen and underscore${NC}" && exit 1
    fi
    [ ! -z "$mediaid" ] && log+="mediaid: ${mediaid}\n"
}

ask_input(){
    if [ -z "$input" ] ; then
    	printf "${BLUE}Drag in the file: ${NC}"
    	read input
		[ -z "$input" ] && ask_input
		[ "$input" == "q" ] && exit 0
    	basename=`basename "$input"`
    	[ ! -z "$input log" ] && log+="input: ${input}\n"
    fi    
}

check_dependencies(){
	deps_ok=YES
	while [ "$*" != "" ] ; do
		dependency="$1"
		if [ ! $(which $dependency) ] ; then
            report "${RED}This script requires $dependency to run but it is not installed${NC}"
            report "${RED}If you are running ubuntu or debian you might be able to install $dependency with the following command${NC}"
            report "${RED}sudo apt-get install ${dependency}${NC}"
            report "${RED}If you are running mac you might be able to install $dependency with the following command${NC}"
            report "${RED}brew install ${dependency}${NC}"
            deps_ok=NO	
		fi
	    shift
	done
    if [[ "$deps_ok" == "NO" ]]; then
            report "${RED}Unmet dependencies${NC}"
            report "${RED}Aborting!${NC}"
            exit 1
    else
            return 0
    fi
}

ask(){
	# This function requires 3 arguments
	# 1) A prompt
	# 2) The label for the metadata value
    read -p "${1}" response
    if [ -z "$response" ] ; then
    	ask "$1" "$2"
    else
    	log+="${2}: ${response}\n"
    fi
	echo
}
offerChoice(){
	# This function requires 3 arguments
	# 1) A prompt
	# 2) The label for the metadata value
	# 3) A vocabulary list
	PS3="${1}"
	label="${2}"
	eval set "$3"
	select option in "$@"
	do
		break
	done
	log+="${label}: ${option}\n"
	echo
}

make_mezz_for_xdcam(){
	som="$1"
	dur="$2"

	tmc_ms=`mediainfo --inform="Video;%Delay%" "$3"`
	tmc_smp=`mediainfo --inform="Video;%Delay/String3%" "$3"`
	tmc_sec=`echo "$tmc_ms * 0.001" | bc`

	som_h=`echo "$som" | cut -c 1-2`
	som_m=`echo "$som" | cut -c 4-5`
	som_s=`echo "$som" | cut -c 7-8`
	som_f=`echo "$som" | cut -c 10-11`
	som_fc=`echo "scale=3; (((((3600 * $som_h)+(60 * $som_m)+ $som_s ) * 30)+ $som_f ) - ( 2 * (((60 * $som_h)+ $som_m ) - (((60 * $som_h)+ $som_m ) / 10 )))) / 29.97" | bc`

	dur_h=`echo "$dur" | cut -c 1-2`
	dur_m=`echo "$dur" | cut -c 4-5`
	dur_s=`echo "$dur" | cut -c 7-8`
	dur_f=`echo "$dur" | cut -c 10-11`
	dur_fc=`echo "scale=3; (((((3600 * $dur_h)+(60 * $dur_m)+ $dur_s ) * 30)+ $dur_f ) - ( 2 * (((60 * $dur_h)+ $dur_m ) - (((60 * $dur_h)+ $dur_m ) / 10 )))) / 29.97" | bc`

	rel_start=`echo "scale=3; $som_fc - $tmc_sec" | bc`
	pushd `dirname "$4"`
	report "${GREEN}Starting ffmpeg to trim mxf file at `date`. This will take a few minutes...${NC}"
	ffmpeg 2</dev/null -report -y -ss "$rel_start" -t "$dur_fc" -i "$3" -map 0:v -map 0:a:0 -map 0:a:1 -c copy "$4"
	popd
}

find_input (){
	[ -d "$1" ] && [ -d "$1/objects/service" ] && sourcefile=`find "$1/objects/service" -maxdepth 1 -mindepth 1 -type f \( -name "*.mov" -o -name "*.mxf" -o -name "*.mp4" -o -name "*.dv" \) ! -name ".*"`
    [ -f "$1" ] && sourcefile="$1"
    [ ! "$sourcefile" ] && sourcefile=`find "$1/objects" -maxdepth 1 -mindepth 1 -type f \( -name "*.mov" -o -name "*.mxf" -o -name "*.mp4" -o -name "*.dv" \) ! -name ".*"`
	[ ! "$sourcefile" ] && { report "${RED}A valid source file isn't found.${NC}" ; exit 1 ;};
	log+="sourcefile: ${sourcefile}\n"
}

get_width(){
    width=`ffprobe "$1" -show_streams -select_streams 0:v 2> /dev/null | grep width= | cut -d = -f 2`
}

get_height(){
    height=`ffprobe "$1" -show_streams -select_streams 0:v 2> /dev/null | grep height= | cut -d = -f 2`
}

get_dar(){
    dar=`ffprobe "$1" -show_streams -select_streams 0:v 2> /dev/null | grep display_aspect_ratio= | cut -d = -f 2 | sed 's|:|/|g'`
}

get_codectagstring(){
	codec_tag_string=`ffprobe "$1" -show_streams -select_streams 0:v 2> /dev/null | grep codec_tag_string= | cut -d = -f 2`
}

get_duration(){
	DURATION=`ffprobe "$1" -show_format 2> /dev/null | grep duration= | cut -d = -f 2`
}

get_maxdvdbitrate(){
	get_duration "$1"
	local DVDCAPACITY=37000000000  # in bits
	local CAPDVDBITRATE=6000000    # in bits/second
	MAXDVDBITRATE=`echo "(37000000000 - ( $DURATION * 224000 )) / $DURATION" | bc`
	if ! [[ "$MAXDVDBITRATE" =~ ^[0-9]+$ ]] ; then
		report "${RED}Calculation of dvd bitrate failed. Evaluated to ${MAXDVDBITRATE}. Using 4000000 as bitrate instead.${NC}"
		MAXDVDBITRATE=4000000
	elif [ "$MAXDVDBITRATE" -gt "$CAPDVDBITRATE" ] ; then
		MAXDVDBITRATE="$CAPDVDBITRATE"
	fi
}