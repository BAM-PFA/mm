#!/bin/bash
# makeflv, makes a crappy flash file
version="1.0"
scriptdir=$(dirname $(which "${0}"))
. "${scriptdir}/mmfunctions" || { echo "Missing '${scriptdir}/mmfunctions'. Exiting." ; exit 1 ;};
dependencies=(ffmpeg)
_initialize_make
suffix=""
extension="flv"
relativepath="access/flv"

outputdir="$HOME/Desktop/$(basename $0)" # default output directory, override with -o

usage(){
    echo
    echo "$(basename "${0}") ${version}"
    echo "This application will create a prores/quicktime file (suitable for editing) from a video file or package input with the following options. By default the output will be written to ${outputdir}. You can override this with the -o option."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -o /directory/to/write/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":o:d:e:E:nh" opt ; do
    case "${opt}" in
        o) outputdir_forced="$OPTARG" && _check_outputdir_forced ;;
        d) deliverdir="$OPTARG" && check_deliverdir ;;
        e) emailaddress_delivery="$OPTARG" && check_emailaddress "${emailaddress_delivery}" ;;
        E) emailaddress_outcome="$OPTARG" && check_emailaddress "${emailaddress_outcome}" ;;
        n) DRYRUN=true;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    # get context about the input
    input="${1}"
    shift
    if [ -z "${outputdir_forced}" ] ; then
        [ -d "${input}" ] && { outputdir="${input}/objects/${relativepath}" && logdir="${input}/metadata/submissionDocumentation/logs" ;};
        [ -f "${input}" ] && { outputdir=$(dirname "${input}")"/${relativepath}" && logdir="$(dirname "${input}")/${relativepath}/logs" ;};
        [ ! "${outputdir}" ] && { outputdir="${input}/objects/${relativepath}" && logdir="${input}/metadata/submissionDocumentation/logs" ;};
    else
        outputdir="${outputdir_forced}"
        logdir="${outputdir}/logs"
    fi
    _find_input "${input}"
    mediaid=$(basename "${input}" | cut -d. -f1)

    _set_up_output

    # clear local arrays
    unset inputoptions
    unset middleoptions

    # encoding options
    get_codectagstring "${sourcefile}"
    get_videostreamcount "${sourcefile}"
    get_audiostreamcount "${sourcefile}"
    inputoptions+=(-vsync 0)
    inputoptions+=(-nostdin)
    if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
        if [[ "${codec_tag_string}" == "mjp2" ]] ; then
             inputoptions+=(-vcodec libopenjpeg)
        fi
        middleoptions+=(-map 0:v)
        middleoptions+=(-c:v libx264)
        middleoptions+=(-pix_fmt yuv420p)
        middleoptions+=(-b:v 4500k)
        middleoptions+=(-s 480x360)
        middleoptions+=(-vf setdar=4/3,setsar=1/1)
    fi
    if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
        middleoptions+=(-map 0:a)
        middleoptions+=(-sample_fmt s16p)
        middleoptions+=(-b:a 320k)
        middleoptions+=(-ac 2)
    fi

    # set in and out times if used
    ingestlog="${logdir}/capture.log"
    if [[ -f "${ingestlog}" && "${isobject}" = "Y" ]] ; then
       intime=$(_readingestlog "intime")
       outtime=$(_readingestlog "outtime")
       if [[ "${intime}" ]] ; then
           report -dt "ATTENTION: Transcoding will use intime (${intime}) during transcoding."
           middleoptions+=(-ss "${intime}")
       fi
       if [[ "${outtime}" ]] ; then
           report -dt "ATTENTION: Transcoding will use outtime (${outtime}) during transcoding."
           middleoptions+=(-to "${outtime}")
       fi
    fi

    _prep_ffmpeg_log
    if [ "${concatsource}" != "" ] ; then
        ffmpeginput="${concatsource}"
    else
        ffmpeginput="${sourcefile}"
    fi
    _run_critical ffmpeg ${inputoptions[@]} -i "${ffmpeginput}" ${middleoptions[@]} "${output}"
    echo
    _summarize_make
    _deliver_output
    _log -e
done
