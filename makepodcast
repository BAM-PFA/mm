#!/bin/bash
# makepodcast
# makes a file appropriate for podcasting
version="1.0"
unset dependencies
dependencies=(ffmpeg)
deliverdir=""
DRYRUN=false

scriptdir=$(dirname "$0")
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};

usage(){
    echo
    echo "$(basename $0) ${version}"
    echo "This application will create a QuickTime file suitable for podcasting from a video file or package input with the following options."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "$#" = 0 ] && usage
check_dependencies "${dependencies[@]}"

cleanup(){
    log -a "Process aborted"
    exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":hd:n" opt; do
    case "$opt" in
        n) DRYRUN=true;;
        h) usage ;;
        d) 
            deliverdir="$OPTARG"
            [ ! -d "$deliverdir" ] && report -wt "The delivery directory, ${deliverdir}, does not exist. Can not deliver the output of $(basename "$0")."
            ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "$*" != "" ] ; do
    input="$1"
    [ -d "$input" ] && { outputdir="$input/objects/access/podcast" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    [ -f "$input" ] && { outputdir=$(dirname "$input")"/access/podcast" && logdir="$(dirname "$input")/access/logs" ;};
    [ ! "$outputdir" ] && { outputdir="$input/objects/access/podcast" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    find_input "$input"
    mediaid=$(basename "$input" | cut -d. -f1)
    log -b
    podcastoutput="$outputdir/${mediaid%.*}_podcast.mov"
    [ -s "${podcastoutput}" ] && { report -wt "WARNING ${podcastoutput} already exists, skipping transcode" ; [ "$#" = 1 ] && exit 86 || { shift ; continue ;} ;};
    _run mkdir -p "${outputdir}"
    unset inputoptions
    unset middleoptions
    middleoptions+=(-movflags faststart)
    middleoptions+=(-pix_fmt yuv420p)
    middleoptions+=(-c:v libx264)
    middleoptions+=(-b:v 1500k)
    middleoptions+=(-maxrate:v 3000k)
    middleoptions+=(-minrate:v 375k)
    middleoptions+=(-bufsize:v 6000k)
    middleoptions+=(-vf "yadif,scale=640:trunc(ow/dar/2)*2:interl=1")
    middleoptions+=(-c:a libfaac)
    middleoptions+=(-b:a 96k)
    
    get_audio_mapping "${sourcefile}"
    middleoptions+=(${audiomapping_ffmpeg[@]})
    
    if [ "${logdir}" != "" ] ; then
        _run mkdir -p "${logdir}"
        export FFREPORT="file=${logdir}/%p_%t_$(basename $0)_${version}.txt"
        inputoptions+=(-v warning -stats)
    fi
    report -dt "Running: ffmpeg ${inputoptions[@]} -i \"${sourcefile}\" ${middleoptions[@]} \"${podcastoutput}\""
    _run ffmpeg ${inputoptions[@]} -i "${sourcefile}" ${middleoptions[@]} "${podcastoutput}"
    echo
    if [ -d "${deliverdir}" ] ;then
        report -dt "Delivering output"
        _run cp -av "${podcastoutput}" "${deliverdir}/"
    fi
    log -e
    shift
done
