#!/bin/bash
# makeyoutube
# makes a file appropriate for uploading to youtube
version="1.0"
unset dependencies
dependencies=(ffmpeg)
deliverdir=""
DRYRUN=false

scriptdir=$(dirname "$0")
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};

usage(){
    echo
    echo "$(basename $0) ${version}"
    echo "This application will create a high quality h264 file (suitable for uploading to YouTube) from a video file or package input with the following options."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "$#" = 0 ] && usage
check_dependencies "${dependencies[@]}"

cleanup(){
    log -a "Process aborted"
    exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":hd:n" opt; do
    case "$opt" in
        n) DRYRUN=true;;
        h) usage ;;
        d) 
            deliverdir="$OPTARG"
            [ ! -d "$deliverdir" ] && report -wt "The delivery directory, ${deliverdir}, does not exist. Can not deliver the output of $(basename "$0")."
            ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "$*" != "" ] ; do
    input="$1"
    [ -d "$input" ] && { outputdir="$input/objects/access/youtube_up" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    [ -f "$input" ] && { outputdir=$(dirname "$input")"/access/youtube_up" && logdir="$(dirname "$input")/access/logs" ;};
    [ ! "$outputdir" ] && { outputdir="$input/objects/access/youtube_up" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    find_input "$input"

    mediaid=$(basename "$1" | cut -d. -f1)

    log -b

    youtubeoutput="${outputdir}/${mediaid%.*}.mp4"
    [ -s "${youtubeoutput}" ] && { report -wt "WARNING ${youtubeoutput} already exists, skipping transcode" ; [ "$#" = 1 ] && exit 86 || { shift ; continue ;} ;};
    _run mkdir -p "${outputdir}"
    get_height "${sourcefile}"
    get_width "${sourcefile}"

    unset inputoptions
    inputoptions+=(-vsync 0)
    unset middleoptions
    middleoptions+=(-movflags faststart)
    middleoptions+=(-pix_fmt yuv420p)
    middleoptions+=(-c:v libx264)
    middleoptions+=(-crf 18)
    if  [ "${height}" -eq "486" -a "${width}" -eq "720" ] ; then
        middleoptions+=(-vf "crop=720:480:0:4,yadif")
    elif  [ "${height}" -eq "512" -a "${width}" -eq "720" ] ;then
        middleoptions+=(-vf "crop=720:480:0:32,yadif")
    else
        middleoptions+=(-vf yadif)
    fi
    middleoptions+=(-c:a libfaac)
    middleoptions+=(-ac 2)
    middleoptions+=(-b:a 128k)
    middleoptions+=(-f mp4)
    
    get_audio_mapping "${sourcefile}"
    middleoptions+=(${audiomapping_ffmpeg[@]})

    if [ "${logdir}" != "" ] ; then
        _run mkdir -p "${logdir}"
        export FFREPORT="file=${logdir}/%p_%t_$(basename $0)_${version}.txt"
        inputoptions+=(-v warning -stats)
    fi
    report -dt "Working on $(basename "${youtubeoutput}") for youtube upload."
    report -dt "Running: ffmpeg ${inputoptions[@]} -i \"${sourcefile}\" ${middleoptions[@]} \"${youtubeoutput}\""
    _run ffmpeg ${inputoptions[@]} -i "${sourcefile}" ${middleoptions[@]} "${youtubeoutput}"
    echo
    #chapterlist=$(ffmpeg -i "$sourcefile" 2>&1 | grep "Chapter #0." | awk '{print $4}' | tr -d "\n" | sed '$s/.$//') && { chaptered="Y" ; report "Found chapters found in $sourcefile" ;};
    #if [ chaptered="Y" ] ; then
        #if [ "$logdir" != "" ] ; then
            #export FFREPORT="file=${logdir}/%p_%t_$(basename $0)_segmented_${version}.txt"
        #fi
        #-force_key_frames $chapterlist
        #segmentcommand="ffmpeg $inputoptions -i \"$sourcefile\" $middleoptions -r:v ntsc -map 0:v -map 0:a -f segment -segment_times $chapterlist -reset_timestamps 1 #-segment_start_number 1 -segment_time_delta 0.05 \"${youtubeoutput%.*}_S%02d.mp4\""
        #report -dt "Running: $segmentcommand"
        #eval "$segmentcommand"
    #fi
    report -dt "$(basename ${youtubeoutput}) is done."
    [ -d "${deliverdir}" ] && { report -dt "Delivering output" ; cp -av "${youtubeoutput}" "${deliverdir}/" ;};
    shift
    log -e
done

