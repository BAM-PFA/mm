#!/bin/bash
# makeyoutube, makes a file appropriate for uploading to youtube
version="1.0"
scriptdir=$(dirname $(which "$0"))
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};
dependencies=(ffmpeg)
_initialize_make

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "This application will create a high quality h264 file (suitable for uploading to YouTube) from a video file or package input with the following options."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -l (only use the left channel of the first audio track)"
    echo "  -r (only use the right channel of the first audio track)"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":lro:d:e:E:nh" opt ; do
    case "${opt}" in
        l) audiomap="L";;
        r) audiomap="R";;
        o) outputdir_forced="$OPTARG" && _check_outputdir_forced ;;
        d) deliverdir="$OPTARG" && check_deliverdir ;;
        e) emailaddress_delivery="$OPTARG" ;;
        E) emailaddress_outcome="$OPTARG" ;;
        n) DRYRUN=true;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

[ "${emailaddress_outcome}" ] && check_emailaddress "${emailaddress_outcome}"
[ "${emailaddress_delivery}" ] &&  check_emailaddress "${emailaddress_delivery}"

while [ "${*}" != "" ] ; do
    # get context about the input
    input="$1"
    shift
    if [ -z "${outputdir_forced}" ] ; then
        [ -d "${input}" ] && { outputdir="${input}/objects/access/youtube_up" && logdir="${input}/metadata/submissionDocumentation/logs" ;};
        [ -f "${input}" ] && { outputdir=$(dirname "${input}")"/access/youtube_up" && logdir="$(dirname "${input}")/access/logs" ;};
        [ ! "${outputdir}" ] && { outputdir="${input}/objects/access/youtube_up" && logdir="${input}/metadata/submissionDocumentation/logs" ;};
    else
        outputdir="${outputdir_forced}"
        logdir="${outputdir}/logs"
    fi
    _find_input "${input}"
    mediaid=$(basename "${input}" | cut -d. -f1)

    # set up output
    _log -b
    output="${outputdir}/${mediaid%.*}.mp4"
    [ -s "${output}" ] && { report -wt "WARNING ${output} already exists, skipping transcode" ; shift ; continue ;};
    _run mkdir -p "${outputdir}"

    # get information on the input
    get_height "${sourcefile}"
    get_width "${sourcefile}"

    # clear local arrays
    unset inputoptions
    unset middleoptions
    unset audiomapping_ffmpeg

    # encoding options
    get_codectagstring "${sourcefile}"
    get_videostreamcount "${sourcefile}"
    get_audiostreamcount "${sourcefile}"
    inputoptions+=(-vsync 0)
    inputoptions+=(-nostdin)
    if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
        if [[ "${codec_tag_string}" == "mjp2" ]] ; then
             inputoptions+=(-vcodec libopenjpeg)
        fi
        middleoptions+=(-movflags faststart)
        middleoptions+=(-pix_fmt yuv420p)
        middleoptions+=(-c:v libx264)
        middleoptions+=(-crf 18)
        middleoptions+=(-maxrate 8760k)
        middleoptions+=(-bufsize 1835k)
        if  [ "${height}" -eq "486" -a "${width}" -eq "720" ] ; then
            middleoptions+=(-vf "crop=720:480:0:4,yadif")
        elif  [ "${height}" -eq "512" -a "${width}" -eq "720" ] ;then
            middleoptions+=(-vf "crop=720:480:0:32,yadif")
        else
            middleoptions+=(-vf yadif)
        fi
    fi
    if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
        middleoptions+=(-c:a aac -strict -2)
        middleoptions+=(-ac 2)
        middleoptions+=(-b:a 128k)
        get_audio_index "${sourcefile}"
        if [ "${audiomap}" = "L" ] ; then
            audiomapping_ffmpeg=(-map_channel 0.${audio_index_1}.0)
        elif [ "${audiomap}" = "R" ] ; then
            audiomapping_ffmpeg=(-map_channel 0.${audio_index_1}.1)
        else
            get_audio_mapping "${sourcefile}"
        fi
        middleoptions+=(${audiomapping_ffmpeg[@]})
    fi
    middleoptions+=(-f mp4)

    _prep_ffmpeg_log
    if [ "${concatsource}" != "" ] ; then
        ffmpeginput="${concatsource}"
    else
        ffmpeginput="${sourcefile}"
    fi
    _run_critical ffmpeg ${inputoptions[@]} -i "${ffmpeginput}" ${middleoptions[@]} "${output}"
    echo
    _summarize_make
    _deliver_output "${MAKEYOUTUBE_DELIVERY_EMAIL_TO}"
    _log -e
done
