#!/bin/bash
# mmconfig
# set up variables for microservices
CONFIG="Y"
CONFIG_VERSION="1.0"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

# local variables
REQUIRED_VARIABLES=("OUTDIR_INGESTFILE" "OUTDIR_INGESTXDCAM" "OUTDIR_PAPER" "AIP_STORAGE" "PODCASTDELIVER" "YOUTUBEDELIVER" "TMPDIR" "REGEX4PODCAST" "DVDLABELPREFIX" "OMNEONIP" "OMNEONPATH" "CUSTOM_LOG_DIR" "LTO_INDEX_DIR" "LOCAL_MM_DIR" "EMAIL_FROM" "MAKEYOUTUBE_DELIVERY_EMAIL_TO" "MAKEBROADCAST_DELIVERY_EMAIL_TO" "FILEMAKER_DB" "FILEMAKER_XML_URL" "VOLADJUST")

OPTIND=1

while getopts ":F:abh" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}" ;;
        a) RUNPASHUA="Y" ;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
    esac
done

_config_edit(){
    [ -z "${1}" -o -z "${2}" ] && { _report -w "The config_edit function requires two arguments. Error." ; exit ;};
    SEDTEMP=$(_maketemp)
    sed "s:^${1}=[^ ]*:$1=$2:" "${MM_CONFIG_FILE}" > "${SEDTEMP}"
    cp "${SEDTEMP}" "${MM_CONFIG_FILE}"
}

_test_config(){
    for DIRECTORYVARIABLE in OUTDIR_INGESTFILE OUTDIR_INGESTXDCAM OUTDIR_PAPER AIP_STORAGE PODCASTDELIVER YOUTUBEDELIVER TMPDIR CUSTOM_LOG_DIR LTO_INDEX_DIR ; do
        if [ ! -d "${!DIRECTORYVARIABLE}" ] ; then
            _report -w "${DIRECTORYVARIABLE} is NOT a valid directory"
        fi
    done
    for BOOLEANVARIABLE in VOLADJUST ; do
        if [[ ! "${!BOOLEANVARIABLE}" = "Y" && ! "${!BOOLEANVARIABLE}" = "N" ]] ; then
            _report -w "${BOOLEANVARIABLE} is NOT set to Y or N"
        fi
    done
}

_add_key(){
    KEY_TO_ADD="${1}"
    grep -q "^${KEY_TO_ADD}=" "${MM_CONFIG_FILE}" ; GREP_CODE="$?"
    if [[ ! "${GREP_CODE}" -eq "0" ]] ; then
        _report -td "Adding NEW variable ${KEY_TO_ADD} to ${MM_CONFIG_FILE}"
        echo "${KEY_TO_ADD}=" >> "${MM_CONFIG_FILE}"
    fi
}

CONF="
# Set transparency: 0 is transparent, 1 is opaque
*.transparency=1.00
*.x = 250
*.y = 250

# Set window title
*.title = mm config file

# intro text
intro.x = 20
intro.y = 600
intro.width = 500
intro.type = text
intro.text = Set up mmconfig variables

# ask OUTDIR_INGESTFILE
OUTDIR_INGESTFILE.x = 20
OUTDIR_INGESTFILE.y = 550
OUTDIR_INGESTFILE.type = openbrowser
OUTDIR_INGESTFILE.label = Please navigate to and select the OUTDIR_INGESTFILE directory that you've created:
OUTDIR_INGESTFILE.width = 270

# OUTDIR_INGESTXDCAM
OUTDIR_INGESTXDCAM.x = 20
OUTDIR_INGESTXDCAM.y = 500
OUTDIR_INGESTXDCAM.type = openbrowser
OUTDIR_INGESTXDCAM.label = Please navigate to and select the OUTDIR_INGESTXDCAM directory that you've created:
OUTDIR_INGESTXDCAM.width = 270

# OUTDIR_PAPER
OUTDIR_PAPER.x = 20
OUTDIR_PAPER.y = 450
OUTDIR_PAPER.type = openbrowser
OUTDIR_PAPER.label = Please navigate to and select the OUTDIR_PAPER directory that you've created:
OUTDIR_PAPER.width = 270

# AIP_STORAGE
AIP_STORAGE.x = 20
AIP_STORAGE.y = 400
AIP_STORAGE.type = openbrowser
AIP_STORAGE.label = Please navigate to and select the AIP_STORAGE directory that you've created:
AIP_STORAGE.width = 270

# PODCASTDELIVER
PODCASTDELIVER.x = 20
PODCASTDELIVER.y = 350
PODCASTDELIVER.type = openbrowser
PODCASTDELIVER.label = Please navigate to and select the PODCASTDELIVER directory that you've created:
PODCASTDELIVER.width = 270

# YOUTUBEDELIVER
YOUTUBEDELIVER.x = 20
YOUTUBEDELIVER.y = 300
YOUTUBEDELIVER.type = openbrowser
YOUTUBEDELIVER.label = Please navigate to and select the YOUTUBEDELIVER directory that you've created:
YOUTUBEDELIVER.width = 270

# TMPDIR
TMPDIR.x = 20
TMPDIR.y = 250
TMPDIR.type = openbrowser
TMPDIR.label = Please navigate to and select the TMPDIR directory that you've created:
TMPDIR.width = 270

# REGEX4PODCAST
REGEX4PODCAST.x = 20
REGEX4PODCAST.y = 200
REGEX4PODCAST.type = textfield
REGEX4PODCAST.label = Please enter the regular expression you'd like to use to determine whether a file qualifies for podcast creation:
REGEX4PODCAST.width = 300

# DVDLABELPREFIX
DVDLABELPREFIX.x = 20
DVDLABELPREFIX.y = 150
DVDLABELPREFIX.type = textfield
DVDLABELPREFIX.label = Please enter the prefix you'd like added to the filename in makedvd. You may leave this blank:
DVDLABELPREFIX.width = 125

# OMNEONIP
OMNEONIP.x = 20
OMNEONIP.y = 100
OMNEONIP.type = textfield
OMNEONIP.label = Please enter the IP address for the server where you would like assets to be delivered:
OMNEONIP.width = 125

# OMNEONPATH
OMNEONPATH.x = 20
OMNEONPATH.y = 50
OMNEONPATH.type = textfield
OMNEONPATH.label = Please enter the file path for the server where you would like assets to be delivered:
OMNEONPATH.width = 125

# CUSTOM_LOG_DIR
CUSTOM_LOG_DIR.x = 600
CUSTOM_LOG_DIR.y = 550
CUSTOM_LOG_DIR.type = openbrowser
CUSTOM_LOG_DIR.label = Please navigate to and select the CUSTOM_LOG_DIR directory that you've created:
CUSTOM_LOG_DIR.width = 270

# LTO_INDEX_DIR
LTO_INDEX_DIR.x = 600
LTO_INDEX_DIR.y = 500
LTO_INDEX_DIR.type = openbrowser
LTO_INDEX_DIR.label = Please navigate to and select the LTO_INDEX_DIR directory that you've created:
LTO_INDEX_DIR.width = 270

# LOCAL_MM_DIR
LOCAL_MM_DIR.x = 600
LOCAL_MM_DIR.y = 450
LOCAL_MM_DIR.type = openbrowser
LOCAL_MM_DIR.label = Please navigate to and select the LOCAL_MM_DIR directory that you've created:
LOCAL_MM_DIR.width = 270

# EMAIL_FROM
EMAIL_FROM.x = 600
EMAIL_FROM.y = 400
EMAIL_FROM.type = textfield
EMAIL_FROM.label = Please enter the email account that notifications will be sent from:
EMAIL_FROM.width = 125

# MAKEYOUTUBE_DELIVERY_EMAIL_TO
MAKEYOUTUBE_DELIVERY_EMAIL_TO.x = 600
MAKEYOUTUBE_DELIVERY_EMAIL_TO.y = 350
MAKEYOUTUBE_DELIVERY_EMAIL_TO.type = textfield
MAKEYOUTUBE_DELIVERY_EMAIL_TO.label = Please enter the email account (or multiple accounts separated by a comma) makeyoutube notifications will be delivered to:
MAKEYOUTUBE_DELIVERY_EMAIL_TO.width = 125

# MAKEBROADCAST_DELIVERY_EMAIL_TO
MAKEBROADCAST_DELIVERY_EMAIL_TO.x = 600
MAKEBROADCAST_DELIVERY_EMAIL_TO.y = 300
MAKEBROADCAST_DELIVERY_EMAIL_TO.type = textfield
MAKEBROADCAST_DELIVERY_EMAIL_TO.label = Please enter the email account (or multiple accounts separated by a comma) makebroadcast notifications will be delivered to:
MAKEBROADCAST_DELIVERY_EMAIL_TO.width = 125

# FILEMAKER_DB
FILEMAKER_DB.x = 600
FILEMAKER_DB.y = 250
FILEMAKER_DB.type = textfield
FILEMAKER_DB.label = Please enter the name of the filemaker database:
FILEMAKER_DB.width = 125

# FILEMAKER_XML_URL
FILEMAKER_XML_URL.x = 600
FILEMAKER_XML_URL.y = 150
FILEMAKER_XML_URL.type = textfield
FILEMAKER_XML_URL.label = Please enter the address for the delivery of metadata to the FileMaker API:
FILEMAKER_XML_URL.width = 125

# VOLADJUST
VOLADJUST.x = 600
VOLADJUST.y = 80
VOLADJUST.type = radiobutton
VOLADJUST.label = Please choose either Y or N to test and adjust volume during transcoding:
VOLADJUST.option = Y
VOLADJUST.option = N
VOLADJUST.width = 125

# Add a cancel button with default label
cb.type=cancelbutton

";

# if a config file does not exist, create one using this GUI
if [[ "${RUNPASHUA}" == "Y" ]] ; then
    PASHUA_CONFIGFILE=`/usr/bin/mktemp /tmp/pashua_XXXXXXXXX`
    echo "${CONF}" > "${PASHUA_CONFIGFILE}"
    _pashua_run
    rm "${PASHUA_CONFIGFILE}"
    echo "  OUTDIR_INGESTFILE = ${OUTDIR_INGESTFILE}"
    echo "  OUTDIR_INGESTXDCAM = ${OUTDIR_INGESTXDCAM}"
    echo "  OUTDIR_PAPER = ${OUTDIR_PAPER}"
    echo "  AIP_STORAGE = ${AIP_STORAGE}"
    echo "  PODCASTDELIVER = ${PODCASTDELIVER}"
    echo "  YOUTUBEDELIVER = ${YOUTUBEDELIVER}"
    echo "  TMPDIR = ${TMPDIR}"
    echo "  REGEX4PODCAST = ${REGEX4PODCAST}"
    echo "  DVDLABELPREFIX = ${DVDLABELPREFIX}"
    echo "  OMNEONIP = ${OMNEONIP}"
    echo "  OMNEONPATH = ${OMNEONPATH}"
    echo "  CUSTOM_LOG_DIR = ${CUSTOM_LOG_DIR}"
    echo "  LTO_INDEX_DIR = ${LTO_INDEX_DIR}"
    echo "  LOCAL_MM_DIR = ${LOCAL_MM_DIR}"
    echo "  EMAIL_FROM = ${EMAIL_FROM}"
    echo "  MAKEYOUTUBE_DELIVERY_EMAIL_TO = ${MAKEYOUTUBE_DELIVERY_EMAIL_TO}"
    echo "  MAKEBROADCAST_DELIVERY_EMAIL_TO = ${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
    echo "  FILEMAKER_DB = ${FILEMAKER_DB}"
    echo "  FILEMAKER_XML_URL = ${FILEMAKER_XML_URL}"
    echo "  VOLADJUST = ${VOLADJUST}"
    echo ""

    #write to the config file
    echo "OUTDIR_INGESTFILE=\"${OUTDIR_INGESTFILE}\"" > "${MM_CONFIG_FILE}"
    echo "OUTDIR_INGESTXDCAM=\"${OUTDIR_INGESTXDCAM}\"" >> "${MM_CONFIG_FILE}"
    echo "OUTDIR_PAPER=\"${OUTDIR_PAPER}\"" >> "${MM_CONFIG_FILE}"
    echo "AIP_STORAGE=\"${AIP_STORAGE}\"" >> "${MM_CONFIG_FILE}"
    echo "PODCASTDELIVER=\"${PODCASTDELIVER}\"" >> "${MM_CONFIG_FILE}"
    echo "YOUTUBEDELIVER=\"${YOUTUBEDELIVER}\"" >> "${MM_CONFIG_FILE}"
    echo "TMPDIR=\"${TMPDIR}\"" >> "${MM_CONFIG_FILE}"
    echo "REGEX4PODCAST=\"${REGEX4PODCAST}\"" >> "${MM_CONFIG_FILE}"
    echo "DVDLABELPREFIX=\"${DVDLABELPREFIX}\"" >> "${MM_CONFIG_FILE}"
    echo "OMNEONIP=\"${OMNEONIP}\"" >> "${MM_CONFIG_FILE}"
    echo "OMNEONPATH=\"${OMNEONPATH}\"" >> "${MM_CONFIG_FILE}"
    echo "CUSTOM_LOG_DIR=\"${CUSTOM_LOG_DIR}\"" >> "${MM_CONFIG_FILE}"
    echo "LTO_INDEX_DIR=\"${LTO_INDEX_DIR}\"" >> "${MM_CONFIG_FILE}"
    echo "LOCAL_MM_DIR=\"${LOCAL_MM_DIR}\"" >> "${MM_CONFIG_FILE}"
    echo "EMAIL_FROM=\"${EMAIL_FROM}\"" >> "${MM_CONFIG_FILE}"
    echo "MAKEYOUTUBE_DELIVERY_EMAIL_TO=\"${MAKEYOUTUBE_DELIVERY_EMAIL_TO}\"" >> "${MM_CONFIG_FILE}"
    echo "MAKEBROADCAST_DELIVERY_EMAIL_TO=\"${MAKEBROADCAST_DELIVERY_EMAIL_TO}\"" >> "${MM_CONFIG_FILE}"
    echo "FILEMAKER_DB=\"${FILEMAKER_DB}\"" >> "${MM_CONFIG_FILE}"
    echo "FILEMAKER_XML_URL=\"${FILEMAKER_XML_URL}\"" >> "${MM_CONFIG_FILE}"
    echo "VOLADJUST=\"${VOLADJUST}\"" >> "${MM_CONFIG_FILE}"
else
    # set up configuration file using the command line
    echo "# $(basename ${MM_CONFIG_FILE})" > "${MM_CONFIG_FILE}"
    echo "# This configuration file contains variables used throughout ${WHAT_IS_THIS}." >> "${MM_CONFIG_FILE}"
    echo "# Edit the lines below to form KEY=VALUE. Please do not add or remove the existing KEYs. Do not edit MM_CONFIG_FILE_VERSION." >> "${MM_CONFIG_FILE}"
    echo "MM_CONFIG_FILE_VERSION=${CONFIG_VERSION}" >> "${MM_CONFIG_FILE}"

    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        _add_key "${KEY}"
    done

    _report -d "(basename "${0}")"
    _report -d "Set system variables for ${WHAT_IS_THIS}"
    echo
    _report -d "Notes:"
    _report -d "VOLADJUST must be set to 'Y' or 'N'"
    echo
    _report -d "Testing ${MM_CONFIG_FILE} validity"
    _test_config
    echo

    _report -d "Table of existing variables:"
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        VALUE=$(grep "^${KEY}=" "${MM_CONFIG_FILE}" | cut -d= -f2)
        printf '\t%-40s %-40s\n' "${KEY}" "${VALUE}"
    done
    while true ; do
        EDITOPTION1="Edit config file in nano"
        EDITOPTION2="Edit config file in TextMate"
        _report -q "Edit a variable? "
        PS3="Selection (enter by number)? "
        select CONFIG_KEY in "${EDITOPTION1}" "${EDITOPTION2}" "${REQUIRED_VARIABLES[@]}" "Quit"
        do
            break
        done
        [ "${CONFIG_KEY}" = "Quit" ] && { echo Goodbye. ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION1}" ] && { nano "${MM_CONFIG_FILE}" ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION2}" ] && { mate "${MM_CONFIG_FILE}" ; exit 1 ;};
        echo -n "Enter the value for ${CONFIG_KEY}: "
        read -e "CONFIG_VALUE"
        echo "${CONFIG_KEY} is now set to ${CONFIG_VALUE}"
        _config_edit "${CONFIG_KEY}" "${CONFIG_VALUE}"
    done

fi