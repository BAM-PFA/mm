#!/bin/bash
# mmconfig
# set up variables for microservices
CONFIG="Y"
CONFIG_VERSION="1.0"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

# local variables
REQUIRED_VARIABLES=("OUTDIR_INGESTFILE" "OUTDIR_INGESTXDCAM" "OUTDIR_PAPER" "AIP_STORAGE" "PODCASTDELIVER" "YOUTUBEDELIVER" "TMPDIR" "REGEX4PODCAST" "DVDLABELPREFIX" "OMNEONIP" "OMNEONPATH" "CUSTOM_LOG_DIR" "LTO_INDEX_DIR" "LOCAL_MM_DIR" "EMAIL_FROM" "MAKEYOUTUBE_DELIVERY_EMAIL_TO" "MAKEBROADCAST_DELIVERY_EMAIL_TO" "FILEMAKER_DB" "FILEMAKER_XML_URL" "VOLADJUST")

_config_edit(){
    [ -z "${1}" -o -z "${2}" ] && { _report -w "The config_edit function requires two arguments. Error." ; exit ;};
    SEDTEMP=$(_maketemp)
    sed "s:^${1}=[^ ]*:$1=$2:" "${CONFIG_FILE}" > "${SEDTEMP}"
    cp "${SEDTEMP}" "${CONFIG_FILE}"
}

_test_config(){
    for DIRECTORYVARIABLE in OUTDIR_INGESTFILE OUTDIR_INGESTXDCAM OUTDIR_PAPER AIP_STORAGE PODCASTDELIVER YOUTUBEDELIVER TMPDIR CUSTOM_LOG_DIR LTO_INDEX_DIR ; do
        if [ ! -d "${!DIRECTORYVARIABLE}" ] ; then
            _report -w "${DIRECTORYVARIABLE} is NOT a valid directory"
        fi
    done
    for BOOLEANVARIABLE in VOLADJUST ; do
        if [[ ! "${!BOOLEANVARIABLE}" = "Y" && ! "${!BOOLEANVARIABLE}" = "N" ]] ; then
            _report -w "${BOOLEANVARIABLE} is NOT set to Y or N"
        fi
    done
}

_add_key(){
    KEY_TO_ADD="${1}"
    grep -q "^${KEY_TO_ADD}=" "${CONFIG_FILE}" ; GREP_CODE="$?"
    if [[ ! "${GREP_CODE}" -eq "0" ]] ; then
        _report -td "Adding NEW variable ${KEY_TO_ADD} to ${CONFIG_FILE}"
        echo "${KEY_TO_ADD}=" >> "${CONFIG_FILE}"
    fi
}

# set up configuration file if required
if [[ ! -f "${CONFIG_FILE}" ]] ; then
    echo "# $(basename ${CONFIG_FILE})" > "${CONFIG_FILE}"
    echo "# This configuration file contains variables used throughout ${WHAT_IS_THIS}." >> "${CONFIG_FILE}"
    echo "# Edit the lines below to form KEY=VALUE. Please do not add or remove the existing KEYs. Do not edit CONFIG_FILE_VERSION." >> "${CONFIG_FILE}"
    echo "CONFIG_FILE_VERSION=${CONFIG_VERSION}" >> "${CONFIG_FILE}"
fi
for KEY in "${REQUIRED_VARIABLES[@]}" ; do
    _add_key "${KEY}"
done

_report -d "(basename "${0}")"
_report -d "Set system variables for ${WHAT_IS_THIS}"
echo
_report -d "Notes:"
_report -d "VOLADJUST must be set to 'Y' or 'N'"
echo
_report -d "Testing ${CONFIG_FILE} validity"
_test_config
echo

_report -d "Table of existing variables:"
for KEY in "${REQUIRED_VARIABLES[@]}" ; do
    VALUE=$(grep "^${KEY}=" "${CONFIG_FILE}" | cut -d= -f2)
    printf '\t%-40s %-40s\n' "${KEY}" "${VALUE}"
done
while true ; do
    EDITOPTION1="Edit config file in nano"
    EDITOPTION2="Edit config file in TextMate"
    _report -q "Edit a variable? "
    PS3="Selection (enter by number)? "
    select CONFIG_KEY in "${EDITOPTION1}" "${EDITOPTION2}" "${REQUIRED_VARIABLES[@]}" "Quit"
    do
        break
    done
    [ "${CONFIG_KEY}" = "Quit" ] && { echo Goodbye. ; exit 1 ;};
    [ "${CONFIG_KEY}" = "${EDITOPTION1}" ] && { nano "${CONFIG_FILE}" ; exit 1 ;};
    [ "${CONFIG_KEY}" = "${EDITOPTION2}" ] && { mate "${CONFIG_FILE}" ; exit 1 ;};
    echo -n "Enter the value for ${CONFIG_KEY}: "
    read -e "CONFIG_VALUE"
    echo "${CONFIG_KEY} is now set to ${CONFIG_VALUE}"
    _config_edit "${CONFIG_KEY}" "${CONFIG_VALUE}"
done
