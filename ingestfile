#!/bin/bash
# ingestfile
# select an audiovisual file, package it, and transcode it
VERSION="1.0"
REQUIRECONFIG="Y"
DOCHECKSUMS="Y"
MAKETREE="Y"
FORMULA=""
INTIME=""
OUTTIME=""
CLEANUP_CHOICE="N"
MAKEACCESSCOPIES="Y"       # use 'Y' for yes or any other character for no
BLACKFRAMETEST="Y"         # use 'Y' for yes or any other character for no
DELIVERYTOOMNEON="Y"       # use 'Y' for yes or any other character for no
DELIVERACCESSCOPIES="Y"    # use 'Y' for yes or any other character for no
DELIVERYTOAIPSTORAGE="Y"   # use 'Y' for yes or any other character for no

QUEUEFILE="${HOME}/Desktop/queue.txt"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This script will run an interactive interview and then process an input file accordingly."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename ${0}) [ -options ]"
    echo "  -n (do not make any deliveries except for sending the final package to ${AIP_STORAGE}.)"
    echo " -i (do not make any deliveries except for sending the final package to ${DELIVERYTOOMNEON}.)"
    echo "  -h display this help"
    echo
    exit
}

OPTIND=1

while getopts ":F:pnhei" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}";;
        e) EDIT_MODE="Y" ;;
        p) PRESERVATION_MODE="Y" ; DELIVERYTOOMNEON="N" ; DELIVERACCESSCOPIES="N" ; DELIVERYTOAIPSTORAGE="N" ; CLEANUP_CHOICE="Y" ; CLEANUPDECISION="Remove source file after successful ingest" ;;
        n) DELIVERYTOOMNEON="N" ; DELIVERACCESSCOPIES="N" ;;
        i) DELIVERYTOOMNEON="Y" ; DELIVERACCESSCOPIES="N" ; DELIVERYTOAIPSTORAGE="Y" ;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

_add_mediaid_to_queue(){
    [ -n "${MEDIAID}" ] || { _report -wt "Error: mediaid is undefined in add_media_to_queue function" ; exit 1 ;};
    [ -n "${QUEUEFILE}" ] || { _report -wt "Error: queuefile is undefined in add_media_to_queue function" ; exit 1 ;};
    echo "${MEDIAID}" >> "${QUEUEFILE}"
}

_remove_mediaid_from_queue(){
    [ -n "${MEDIAID}" ] || { _report -wt "Error: mediaid is undefined in remove_media_from_queue function" ; exit 1 ;};
    [ -f "${QUEUEFILE}" ] || { _report -wt "Error: queuefile is undefined in remove_media_from_queue function" ; exit 1 ;};
    grep -v "^${MEDIAID}$" "${QUEUEFILE}" | grep "^[A-Z0-9_-]\+$" > "${QUEUEFILE}_tmp"
    rm "${QUEUEFILE}"
    mv "${QUEUEFILE}_tmp" "${QUEUEFILE}"
}

_cleanup(){
    _log -a "Process aborted"
    _remove_mediaid_from_queue
    [ -d "${OUTDIR_INGESTFILE}/${MEDIAID}" ] && mv "${OUTDIR_INGESTFILE}/${MEDIAID}" "${OUTDIR_INGESTFILE}/${MEDIAID}_aborted_ingest_$(_get_iso8601_c)"
    exit 1
}

trap _cleanup SIGHUP SIGINT SIGTERM

# check environment
[ -z "${OUTDIR_INGESTFILE}" ] && { echo "The processing directory must be set. Use [ -p /path/to/processing/directory ] or run mmconfig to set OUTDIR_INGESTFILE." ; exit 1 ;};
[ -z "${AIP_STORAGE}" ] && { echo "The AIP Storage directory must be set. Use [ -a /path/to/AIP/storage/directory ] or run mmconfig to set AIP_STORAGE." ; exit 1 ;};
[ -z "${PODCASTDELIVER}" ] && { echo "A directory for podcast delivery must be set. Use [ -w /path/to/deliver/podcastfiles] or run mmconfig to set PODCASTDELIVER." ; exit 1 ;};
[ -z "${YOUTUBEDELIVER}" ] && { echo "A directory for youtube delivery must be set. Use [ -y /path/to/deliver/youtubefiles] or run mmconfig to set YOUTUBEDELIVER." ; exit 1 ;};

CONF="
# Set transparency: 0 is transparent, 1 is opaque
*.transparency=1.00

# Set window title
*.title = Ingest File

# intro text
intro.x = 20
intro.y = 500
intro.width = 500
intro.type = text
intro.text = Ingest file options. Leave the option blank to be prompted.

# ask operator
OP.x = 20
OP.y = 440
OP.type = textfield
OP.label = Please enter your name:
OP.width = 270

# Media ID
MEDIAID.x = 20
MEDIAID.y = 390
MEDIAID.type = textfield
MEDIAID.label = Please enter a unique MEDIA ID:
MEDIAID.width = 270

# Input file
INPUT.x = 20
INPUT.y = 340
INPUT.type = openbrowser
INPUT.label = Select your file:
INPUT.width=400

# Audio Strategy
AUDIODECISION.x = 20
AUDIODECISION.y = 280
AUDIODECISION.type = combobox
AUDIODECISION.label = Select an audio strategy:
AUDIODECISION.default = Default audio mapping [first audio track used for stereo output]
AUDIODECISION.option =
AUDIODECISION.option = Default audio mapping [first audio track used for stereo output]
AUDIODECISION.option = Only use left of the first audio track [for 21st Century]
AUDIODECISION.option = Only use right of the first audio track
AUDIODECISION.width = 400

# Cropping Strategy
CROPDETECTION.x = 20
CROPDETECTION.y = 220
CROPDETECTION.type = combobox
CROPDETECTION.label = Select a cropping strategy:
CROPDETECTION.default = Do not crop
CROPDETECTION.option =
CROPDETECTION.option = Do not crop
CROPDETECTION.option = Examine the video and auto-crop out black borders (slower)
CROPDETECTION.width = 400

# Optional Formula
FORMULA.x = 20
FORMULA.y = 160
FORMULA.type = combobox
FORMULA.label = Select an optional formula for unusual cases. In most cases select none.
FORMULA.tooltip = To force the input file to be interpreted as top or bottom field first interlacement, select tff or bff. To stretch the input video to 1920x1080 HD frame size, select 'HDS'.
FORMULA.default = none
FORMULA.option =
FORMULA.option = none
FORMULA.option = tff
FORMULA.option = bff
FORMULA.option = hds
FORMULA.option = sds
FORMULA.width = 100

# Cleanup Strategy
CLEANUPDECISION.x = 20
CLEANUPDECISION.y = 100
CLEANUPDECISION.type = combobox
CLEANUPDECISION.label = Select a cleanup strategy
CLEANUPDECISION.default = Leave source file where it is
CLEANUPDECISION.option =
CLEANUPDECISION.option = Leave source file where it is
CLEANUPDECISION.option = Remove source file after successful ingest
CLEANUPDECISION.width = 300

# multitasking strategy
PRIORITY.x = 20
PRIORITY.y = 40
PRIORITY.type = combobox
PRIORITY.label = Would you like to put it in the queue or start now?
PRIORITY.default = put in queue
PRIORITY.option =
PRIORITY.option = put in queue
PRIORITY.option = start now
PRIORITY.width = 125

# Add a cancel button with default label
cb.type=cancelbutton

";

# edit mode
if [ "${EDIT_MODE}" == "Y" ] ; then
    PASHUA_CONFIGFILE=`/usr/bin/mktemp /tmp/pashua_XXXXXXXXX`
    echo "${CONF}" > "${PASHUA_CONFIGFILE}"
    _pashua_run
    rm "${PASHUA_CONFIGFILE}"
    echo "  OPERATOR = ${OP}"
    echo "  INPUT = ${INPUT}"
    echo "  MEDIAID = ${MEDIAID}"
    echo "  AUDIODECISION = ${AUDIODECISION}"
    echo "  CROPDETECTION = ${CROPDETECTION}"
    echo "  FORMULA = ${FORMULA}"
    echo "  CLEANUPDECISION = ${CLEANUPDECISION}"
    echo "  PRIORITY = ${PRIORITY}"
    echo ""
fi

# interview the operator
_ask_operator
_ask_mediaid

## check for existing output
[ -d "${OUTDIR_INGESTFILE}/${MEDIAID}" ] && { _report -wt "It looks like ${MEDIAID} was already ingested. If you want to overwrite the existing one please delete ${OUTDIR_INGESTFILE}/${MEDIAID} first and then try again." ; exit 1 ;};
[ -d "${AIP_STORAGE}/${MEDIAID}" ] && { _report -wt "It looks like ${MEDIAID} was already ingested. If you want to overwrite the existing one please delete ${AIP_STORAGE}/${MEDIAID} first and then try again." ; exit 1 ;};
_ask_input
#here is where we would insert an option for searching for  directory. 
if [ ! $(_is_video "${INPUT}") ] ; then
    _report -qnt "WARNING: ${INPUT} is not recognized as a video file. Please press q to quit, any other key to continue (if you know what you're doing): "
    read NOTVIDRESPONSE
    [ "${NOTVIDRESPONSE}" == "q" ] && exit 0
fi
if [ "${AUDIODECISION}" = "" ] ; then
    _report -q "Select an audio strategy? "
    PS3="Selection? "
    select AUDIODECISION in "Default audio mapping [first audio track used for stereo output]" "Only use left of the first audio track [for 21st Century]" "Only use right of the first audio track"
    do
        break
    done
fi

if [ "${CROPDETECTION}" = "" ] ; then
    _report -q "Select a cropping strategy? "
    PS3="Selection? "
    select CROPDECISION in "Do not crop." "Examine the video and auto-crop out black borders (slower)"
    do
        break
    done
fi

if [ "${FORMULA}" = "" ] ; then
    _report -q "Select an optional formula for unusual cases? "
    _report -d "In most cases, select 'none'. To force the input file to be interpreted as top or bottom field first interlacement, select tff or bff. To stretch the input video to 1920x1080 HD frame size, select 'hds'. To squish into Standard Definition, select 'sds'."
    PS3="Selection? "
    select FORMULA in "none" "tff" "bff" "hds" "sds"
    do
        break
    done
fi

if [ "${CLEANUPDECISION}" = "" ] ; then
    _report -q "Select an cleanup strategy? "
    PS3="Selection? "
    select CLEANUPDECISION in "Leave source file where it is." "Remove source file after successful ingest"
    do
        break
    done

    if [ "${CLEANUPDECISION}" = "Remove source file after successful ingest" ] ; then
        CLEANUP_CHOICE="Y"
    else
        CLEANUP_CHOICE="N"
    fi
fi

if [ "${PRIORITY}" = "" ] ; then
    _report -q "Select an multitasking strategy? "
    PS3="Selection? "
    select PRIORITY in "put in queue" "start now"
    do
        break
    done
fi

# blackframe analysis or in/out requests
if [ "${PRESERVATION_MODE}" == "Y" ] ; then
    _reset_directory
    _ask_intime
    _ask_outtime
    _ask_digitization_logs
else
    if [ "${BLACKFRAMETEST}" = "Y" ] ; then
        _black_at_ends "${INPUT}"
        if [ "${HEAD_BLACK}" -gt "30" ] ; then
            _report -wt "WARNING - There are at least ${HEAD_BLACK} frames of black at the beginning of ${INPUT}"
            _report -qn "Enter q to quit, any other key to continue: "
            read A1
            [ "${A1}" == "q" ] && exit 0
            _ask_intime
        fi
        if [ "${TAIL_BLACK}" -gt "30" ] ; then
            _report -wt "WARNING - There are at least ${TAIL_BLACK} frames of black at the end of ${INPUT}"
            _report -qn "Enter q to quit, any other key to continue: "
            read A2
            [ "${A2}" == "q" ] && exit 0
            _ask_outtime
        fi
    fi
fi

# queue handling
if [ "${PRIORITY}" = "put in queue" ] ; then
    _add_mediaid_to_queue
    NEXT=$(head -n 1 "${QUEUEFILE}")
    while [ "${MEDIAID}" != "${NEXT}" ] ; do
        NEWNEXT=$(head -n 1 "${QUEUEFILE}")
        echo -n "This process is waiting behind these identifiers: "
        cat "${QUEUEFILE}" | tr '\n' ' '
        echo
        while [ "${NEXT}" = "${NEWNEXT}" ] ; do
            sleep 10
            NEWNEXT=$(head -n 1 "${QUEUEFILE}")
        done
        NEXT="${NEWNEXT}"
    done
fi

_log -b

# set up package directories
OBJECTSDIR="${OUTDIR_INGESTFILE}/${MEDIAID}/objects"
_run_critical _mkdir2 "${OBJECTSDIR}"

SUBMISSIONDOCDIR="${OUTDIR_INGESTFILE}/${MEDIAID}/metadata/submissionDocumentation"
_run _mkdir2 "${SUBMISSIONDOCDIR}"

LOGDIR="${OUTDIR_INGESTFILE}/${MEDIAID}/metadata/submissionDocumentation/logs"
_run _mkdir2 "${LOGDIR}"

INGESTLOG="${LOGDIR}/capture.log"
echo -e "${LOG}" >> "${INGESTLOG}"
_writeingestlog "processing_directory" "${OUTDIR_INGESTFILE}"
_writeingestlog "audiodecision" "${AUDIODECISION}"
_writeingestlog "cropdecision" "${CROPDECISION}"
_writeingestlog "cleanupdecision" "${CLEANUPDECISION}"
_writeingestlog "formula" "${FORMULA}"
_writeingestlog "ingest_process_dir" "${OUTDIR_INGESTFILE}"
_writeingestlog "ingest_process_dir_freespace" "$(df -h "${OUTDIR_INGESTFILE}" | tail -n1 | awk '{print $4}')"
_writeingestlog "computer_name" "$(uname -n)"
_writeingestlog "user_name" "$(whoami)"
_writeingestlog "operating_system_version" "$(uname -v)"
_writeingestlog "datetime_start" "$(_get_iso8601)"

if [ "${INTIME}" ] ; then
    _writeingestlog "intime" "${INTIME}"
fi
if [ "${OUTTIME}" ] ; then
    _writeingestlog "outtime" "${OUTTIME}"
fi

# rsync
FROM=$(_get_filesystem "${INPUT}")
TO=$(_get_filesystem "${OBJECTSDIR}/")
# make sure the input is still there
if [ ! -f "${INPUT}" ] ; then
    _report -wt "The input file is no longer available! Where did $(basename "${INPUT}") go? Please redo."
    # clean up queue
    [ "${PRIORITY}" == "put in queue" ] && _cleanup
    exit 1
fi

# either rsync or mv the input into the package
if [ "${FROM}" == "${TO}" -a "${CLEANUP_CHOICE}" == "Y" ] ; then
    _report -dt "Because ${INPUT} and ${OBJECTSDIR} are on the same filesystem and preservation mode is enabled we will mv rather than rsync."
    _run_critical mv -v -n "${INPUT}" "${OBJECTSDIR}/"
    if [ ! "${#FILES[@]}" = 0 ] ; then
        _run_critical mv -v -n "${FILES[@]}" "${LOGDIR}/"
    fi
else
    _report -dt "STATUS Copying the original file to library storage at ${OBJECTSDIR}."
    _run_critical rsync -rt --progress --log-file="${LOGDIR}/rsync_$(_get_iso8601_c)_$(basename ${0})_${VERSION}.txt" "${INPUT}" "${OBJECTSDIR}/"
    if [ ! "${#FILES[@]}" = 0 ] ; then
        _run_critical rsync -rt --progress --log-file="${LOGDIR}/rsync_$(_get_iso8601_c)_$(basename $0)_${VERSION}.txt" "${FILES[@]}" "${LOGDIR}/"
    fi
fi


# if the input is uncompressed, this will try and compress the file
if [ "${PRESERVATION_MODE}" = "Y" ] ; then   
    makelossless "${OUTDIR_INGESTFILE}/${MEDIAID}"
fi

# make copy for broadcast
unset MAKEBROADCASTOPTS
[ "${AUDIODECISION}" == "Only use left of the first audio track [for 21st Century]" -o "${AUDIODECISION}" == "left" ] && MAKEBROADCASTOPTS+=(-l)
[ "${AUDIODECISION}" == "Only use right of the first audio track" ] && MAKEBROADCASTOPTS+=(-r)
[ "${CROPDECISION}" == "Examine the video and auto-crop out black borders (slower)" ] && MAKEBROADCASTOPTS+=(-c)
if [ ! -z "${FORMULA}" ] ; then
    MAKEBROADCASTOPTS+=(-F "${FORMULA}")
fi
"${SCRIPTDIR}/makebroadcast" "${MAKEBROADCASTOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"

# upload broadcast copy
if [ "${DELIVERYTOOMNEON}" == "Y" ] ; then
    _report -dt "STATUS Uploading ${OBJECTSDIR}/service/${MEDIAID%.*}.mov to the OMNEON."
    "${SCRIPTDIR}/uploadomneon" "${OBJECTSDIR}/service/${MEDIAID%.*}.mov"
    _email_delivery "${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
fi

# make access copies
if [ "${MAKEACCESSCOPIES}" == "Y" ] ; then
    _report -dt "STATUS Making access copies."
    # makemp3
    "${SCRIPTDIR}/makemp3" "${OUTDIR_INGESTFILE}/${MEDIAID}"
    # makeframes
    unset MAKEFRAMESOPTS
    [ "${DELIVERACCESSCOPIES}" = "Y" ] && MAKEFRAMESOPTS=(-d "${YOUTUBEDELIVER}")
    "${SCRIPTDIR}/makeframes" "${MAKEFRAMESOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"
    # makeyoutube
    unset MAKEYOUTUBEOPTS
    [ "${DELIVERACCESSCOPIES}" = "Y" ] && MAKEYOUTUBEOPTS=(-Y -d "${YOUTUBEDELIVER}")
    "${SCRIPTDIR}/makeyoutube" "${MAKEYOUTUBEOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"
    # makepodcast
    if [ $(echo "${MEDIAID}" | grep -E "${REGEX4PODCAST}") ] ; then
        _report -dt "${MEDIAID} qualifies for podcast creation."
        unset MAKEPODCASTOPTS
        [ "${DELIVERACCESSCOPIES}" == "Y" ] && MAKEPODCASTOPTS=(-d "${PODCASTDELIVER}")
        "${SCRIPTDIR}/makepodcast" "${MAKEPODCASTOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"
    else
        _report -dt "${MEDIAID} does NOT qualify for podcast creation, skipping."
    fi
    # makedvd
    "${SCRIPTDIR}/makedvd" "${OUTDIR_INGESTFILE}/${MEDIAID}"
fi
# makemetadata
"${SCRIPTDIR}/makemetadata" "${OUTDIR_INGESTFILE}/${MEDIAID}"
# checksums
if [ "${DOCHECKSUMS}" = "Y" ] ; then
    "${SCRIPTDIR}/checksumpackage" "${OUTDIR_INGESTFILE}/${MEDIAID}"
fi

#make xml file of directory structure 
if [ "${MAKETREE}" = "Y" ] ; then
    "${SCRIPTDIR}/maketree" "${OUTDIR_INGESTFILE}/${MEDIAID}"
fi

# more logging
_writeingestlog "datetime_end" "$(_get_iso8601)"

# move and cleanup
if [ "${DELIVERYTOAIPSTORAGE}" == "Y" ] ; then
    rsync -rt --progress --remove-source-files "${OUTDIR_INGESTFILE}/${MEDIAID}" "${AIP_STORAGE}/"
    RSYNC_ERR="${?}"
    [ $(du -s "${OUTDIR_INGESTFILE}/${MEDIAID}" | awk '{print $1}') = "0" ] && rm -r "${OUTDIR_INGESTFILE}/${MEDIAID}"
    _report -dt "STATUS Done. Final package has been delivered to ${AIP_STORAGE}/${MEDIAID}"
fi
if [ "${CLEANUP_CHOICE}" == "Y" ] ; then
    if [ "${RSYNC_ERR}" -gt "0" ] ; then
        _report -wt "Cancelling requested deletion of source file, not looking safe."
    else
        _report -dt "Removing the source file from ${INPUT} as requested."
        _run rm -f "${INPUT}"
    fi
fi

# clean up queue
[ "${PRIORITY}" == "put in queue" ] && _remove_mediaid_from_queue

_log -e
