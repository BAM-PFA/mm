#!/bin/bash
# ingestfile
# select an audiovisual file, package it, and transcode it
version="1.0"
requireconfig="Y"
dochecksums="Y"
intime=""
outtime=""
cleanup="N"
makeaccesscopies="Y"       # use 'Y' for yes or any other character for no
blackframetest="Y"         # use 'Y' for yes or any other character for no
deliverytoomneon="Y"       # use 'Y' for yes or any other character for no
deliveraccesscopies="Y"    # use 'Y' for yes or any other character for no
deliverytoaipstorage="Y"   # use 'Y' for yes or any other character for no

queuefile="${HOME}/Desktop/queue.txt"
scriptdir=$(dirname "${0}")
. "${scriptdir}/mmfunctions" || { echo "Missing '${scriptdir}/mmfunctions'. Exiting." ; exit 1 ;};

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "This script will run an interactive interview and then process an input file accordingly."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -options ]"
    echo "  -n (do not make any deliveries except for sending the final package to ${AIP_STORAGE}.)"
    echo "  -h display this help"
    echo
    exit
}

OPTIND=1
while getopts ":pnh" opt ; do
    case "${opt}" in
        p) preservation_mode="Y" ; deliverytoomneon="N" ; deliveraccesscopies="Y" ; deliverytoaipstorage="N" ;;
        n) deliverytoomneon="N" ; deliveraccesscopies="N" ;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

add_mediaid_to_queue(){
    [ -n "${mediaid}" ] || { report -wt "Error: mediaid is undefined in add_media_to_queue function" ; exit 1 ;};
    [ -n "${queuefile}" ] || { report -wt "Error: queuefile is undefined in add_media_to_queue function" ; exit 1 ;};
    echo "${mediaid}" >> "${queuefile}"
}

remove_mediaid_from_queue(){
    [ -n "${mediaid}" ] || { report -wt "Error: mediaid is undefined in remove_media_from_queue function" ; exit 1 ;};
    [ -f "${queuefile}" ] || { report -wt "Error: queuefile is undefined in remove_media_from_queue function" ; exit 1 ;};
    grep -v "^${mediaid}$" "${queuefile}" | grep "^[A-Z0-9_-]\+$" > "${queuefile}_tmp"
    rm "${queuefile}"
    mv "${queuefile}_tmp" "${queuefile}"
}

cleanup(){
    _log -a "Process aborted"
    remove_mediaid_from_queue
    [ -d "${OUTDIR_INGESTFILE}/${mediaid}" ] && mv "${OUTDIR_INGESTFILE}/${mediaid}" "${OUTDIR_INGESTFILE}/${mediaid}_aborted_ingest_$(get_iso8601_c)"
    exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "This script may be run interactively by running it with no arguments or may be used with the following options."
    echo "Usage: $(basename ${0}) [ -m mediaid ] [ -f input] [ -p processing_directory ] [-a AIP_storage_directory ] [-w podcast_delivery ] [-y youtube_delivery ] [-x Regex ] [ -l audiodecision ] [ -c cleanupdecision ] [ -o operator ] [ -q priority ]"
    echo "  -m mediaid"
    echo "  -f input"
    echo "  -p processing directory. Transcoding will happen here."
    echo "  -a Archive Information Package storage directory. Final package delivery location."
    echo "  -w podcast delivery"
    echo "  -y youtube delivery"
    echo "  -x Regex will identify applicability of various services."
    echo "  -l Use only left channel of source video in transcoding."
    echo "  -c Remove source file after successful ingest."
    echo "  -q Put in queue."
    exit
}

# command-line options to set mediaid and original variables
while getopts ":hm:f:p:a:w:y:xlcro:q" opt; do
    case "${opt}" in
        h) usage ;;
        m) mediaid="${OPTARG}";;
        f) input="${OPTARG}";;
        p) OUTDIR_INGESTFILE="${OPTARG}" ;;
        a) AIP_STORAGE="${OPTARG}" ;;
        w) PODCASTDELIVER="${OPTARG}" ;;
        y) YOUTUBEDELIVER="${OPTARG}" ;;
        x) REGEX4PODCAST="${OPTARG}" ;;
        l) audiodecision="left" ;;
        c) cleanup="Y" ; cleanupdecision="Remove source file after successful ingest" ;;
        r) cropdetection="Y" ;;
        o) op="${OPTARG}" ;;
        q) priority="put in queue" ;;
        \?) echo "Invalid option: -${OPTARG}" ; exit 1 ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
    esac
done

# check environment
[ -z "${OUTDIR_INGESTFILE}" ] && { echo "The processing directory must be set. Use [ -p /path/to/processing/directory ] or run mmconfig to set OUTDIR_INGESTFILE." ; exit 1 ;};
[ -z "${AIP_STORAGE}" ] && { echo "The AIP Storage directory must be set. Use [ -a /path/to/AIP/storage/directory ] or run mmconfig to set AIP_STORAGE." ; exit 1 ;};
[ -z "${PODCASTDELIVER}" ] && { echo "A directory for podcast delivery must be set. Use [ -w /path/to/deliver/podcastfiles] or run mmconfig to set PODCASTDELIVER." ; exit 1 ;};
[ -z "${YOUTUBEDELIVER}" ] && { echo "A directory for youtube delivery must be set. Use [ -y /path/to/deliver/youtubefiles] or run mmconfig to set YOUTUBEDELIVER." ; exit 1 ;};

[ -n "${mediaid}" ] && op="batch process"

# interview the operator
ask_operator
ask_mediaid
## check for existing output
[ -d "${OUTDIR_INGESTFILE}/${mediaid}" ] && { report -wt "It looks like ${mediaid} was already ingested. If you want to overwrite the existing one please delete $OUTDIR_INGESTFILE/$mediaid first and then try again." ; exit 1 ;};
[ -d "${AIP_STORAGE}/${mediaid}" ] && { report -wt "It looks like ${mediaid} was already ingested. If you want to overwrite the existing one please delete $AIP_STORAGE/$mediaid first and then try again." ; exit 1 ;};
ask_input
if [ ! $(is_video "${input}") ] ; then
    report -qnt "WARNING: ${input} is not recognized as a video file. Please press q to quit, any other key to continue (if you know what you're doing): "
    read notvidresponse
    [ "${notvidresponse}" == "q" ] && exit 0
fi
if [ "${audiodecision}" = "" ] ; then
    report -q "Select an audio strategy? "
    PS3="Selection? "
    select audiodecision in "Default audio mapping [first audio track used for stereo output]" "Only use left of the first audio track [for 21st Century]" "Only use right of the first audio track"
    do
        break
    done
fi

if [ "${cropdetection}" = "" ] ; then
    report -q "Select a cropping strategy? "
    PS3="Selection? "
    select cropdecision in "Do not crop." "Examine the video and auto-crop out black borders (slower)"
    do
        break
    done
fi

if [ "${cleanupdecision}" = "" ] ; then
    report -q "Select an cleanup strategy? "
    PS3="Selection? "
    select cleanupdecision in "Leave source file where it is." "Remove source file after successful ingest"
    do
        break
    done

    if [ "${cleanupdecision}" = "Remove source file after successful ingest" ] ; then
        cleanup="Y"
    else
        cleanup="N"
    fi
fi

if [ "${priority}" = "" ] ; then
    report -q "Select an multitasking strategy? "
    PS3="Selection? "
    select priority in "put in queue" "start now"
    do
        break
    done
fi

# blackframe analysis or in/out requests
if [ "${preservation_mode}" == "Y" ] ; then
    _ask_intime
    _ask_outtime
    ask_trimmed_materials
else
    if [ "${blackframetest}" = "Y" ] ; then
        black_at_ends "${input}"
        if [ "${head_black}" -gt "30" ] ; then
            report -wt "WARNING - There are at least ${head_black} frames of black at the beginning of ${input}"
            report -qn "Enter q to quit, any other key to continue: "
            read a1
            [ "${a1}" == "q" ] && exit 0
            _ask_intime
        fi
        if [ "${tail_black}" -gt "30" ] ; then
            report -wt "WARNING - There are at least ${tail_black} frames of black at the end of ${input}"
            report -qn "Enter q to quit, any other key to continue: "
            read a2
            [ "${a2}" == "q" ] && exit 0
            _ask_outtime
        fi
    fi
fi

objectsdir="${OUTDIR_INGESTFILE}/${mediaid}/objects"

# queue handling
if [ "${priority}" = "put in queue" ] ; then
    add_mediaid_to_queue
    next=$(head -n 1 "${queuefile}")
    while [ "${mediaid}" != "${next}" ] ; do
        newnext=$(head -n 1 "${queuefile}")
        echo -n "This process is waiting behind these identifiers: "
        cat "${queuefile}" | tr '\n' ' '
        echo
        while [ "${next}" = "${newnext}" ] ; do
            sleep 10
            newnext=$(head -n 1 "${queuefile}")
        done
        next="${newnext}"
    done
fi

_log -b

# set up package directories
_run_critical _mkdir2 "${objectsdir}"
logdir="${OUTDIR_INGESTFILE}/${mediaid}/metadata/submissionDocumentation/logs"
_run _mkdir2 "${logdir}"
ingestlog="${logdir}/capture.log"
echo -e "$log" >> "${ingestlog}"
_writeingestlog "audiodecision" "${audiodecision}"
_writeingestlog "cropdecision" "${cropdecision}"
_writeingestlog "cleanupdecision" "${cleanupdecision}"
_writeingestlog "ingest_process_dir" "${OUTDIR_INGESTFILE}"
_writeingestlog "ingest_process_dir_freespace" "$(df -h "${OUTDIR_INGESTFILE}" | tail -n1 | awk '{print $4}')"
_writeingestlog "computer_name" "$(uname -n)"
_writeingestlog "user_name" "$(whoami)"
_writeingestlog "operating_system_version" "$(uname -v)"
_writeingestlog "datetime_start" "$(get_iso8601)"

if [ "${intime}" ] ; then
    _writeingestlog "intime" "${intime}"
fi
if [ "${outtime}" ] ; then
    _writeingestlog "outtime" "${outtime}"
fi

submissiondocdir="${OUTDIR_INGESTFILE}/${mediaid}/metadata/submissionDocumentation"
_run _mkdir2 "${submissiondocdir}"

# rsync
from=$(_get_filesystem "${input}")
to=$(_get_filesystem "${objectsdir}/")
if [ "${from}" == "${to}" -a "${cleanup}" == "Y" ] ; then
    report -dt "Because ${input} and ${objectsdir} are on the same filesystem and preservation mode is enabled we will mv rather than rsync."
    _run_critical mv -v -n "${input}" "${objectsdir}/"
else
    report -dt "STATUS Copying the original file to library storage at ${objectsdir}."
    _run_critical rsync -rt --progress --log-file="${logdir}/rsync_$(get_iso8601_c)_$(basename $0)_${version}.txt" "${input}" "${objectsdir}/"
fi

if [ "${preservation_mode}" = "Y" ] ; then
    if [ ! "${#trimmed[@]}" = 0 ] ; then
        trimmed_materials_dir="${objectsdir}/trimmed_materials"
        _mkdir2 "${trimmed_materials_dir}"
        _run_critical rsync -rt --progress --log-file="${logdir}/rsync_$(get_iso8601_c)_$(basename $0)_${version}.txt" "${trimmed[@]}" "${trimmed_materials_dir}/"
    fi
    makelossless "${OUTDIR_INGESTFILE}/${mediaid}"
fi

# make copy for broadcast
unset makebroadcastopts
[ "${audiodecision}" == "Only use left of the first audio track [for 21st Century]" -o "${audiodecision}" == "left" ] && makebroadcastopts+=(-l)
[ "${audiodecision}" == "Only use right of the first audio track" ] && makebroadcastopts+=(-r)
[ "${cropdecision}" == "Examine the video and auto-crop out black borders (slower)" ] && makebroadcastopts+=(-c)
"${scriptdir}/makebroadcast" "${makebroadcastopts[@]}" "${OUTDIR_INGESTFILE}/${mediaid}"

# upload broadcast copy
if [ "${deliverytoomneon}" == "Y" ] ; then
    report -dt "STATUS Uploading ${objectsdir}/service/${mediaid%.*}.mov to the OMNEON."
    "${scriptdir}/uploadomneon" "${objectsdir}/service/${mediaid%.*}.mov"
    email_delivery "${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
fi

if [ "${makeaccesscopies}" == "Y" ] ; then
    # make access copies
    unset makeframesopts
    unset makeyoutubeopts
    unset makepodcastopts
    report -dt "STATUS Making access copies."
    # makemp3
    "$scriptdir/makemp3" "${OUTDIR_INGESTFILE}/${mediaid}"
    # makeframes
    [ "$deliveraccesscopies" = "Y" ] && makeframesopts=(-d "$YOUTUBEDELIVER")
    "$scriptdir/makeframes" "${makeframesopts[@]}" "$OUTDIR_INGESTFILE/$mediaid"
    # makeyoutube
    [ "$deliveraccesscopies" = "Y" ] && makeyoutubeopts=(-d "$YOUTUBEDELIVER")
    "$scriptdir/makeyoutube" "${makeyoutubeopts[@]}" "$OUTDIR_INGESTFILE/$mediaid"
    # makepodcast
    if [ $(echo "$mediaid" | grep -E "${REGEX4PODCAST}") ] ; then
        report -dt "${mediaid} qualifies for podcast creation."
        [ "$deliveraccesscopies" == "Y" ] && makepodcastopts=(-d "$PODCASTDELIVER")
        "$scriptdir/makepodcast" "${makepodcastopts[@]}" "$OUTDIR_INGESTFILE/$mediaid"
    else
        report -dt "${mediaid} does NOT qualify for podcast creation, skipping."
    fi
    # makedvd
    "$scriptdir/makedvd" "${OUTDIR_INGESTFILE}/${mediaid}"
    # makemetadata
    "$scriptdir/makemetadata" "$OUTDIR_INGESTFILE/$mediaid"
    if [ "$dochecksums" = "Y" ] ; then
        "$scriptdir/checksumpackage" "$OUTDIR_INGESTFILE/$mediaid"
    fi
fi
_writeingestlog "datetime_end" "$(get_iso8601)"

# move and cleanup
if [ "${deliverytoaipstorage}" == "Y" ] ; then
    rsync -rt --progress --remove-source-files "${OUTDIR_INGESTFILE}/${mediaid}" "${AIP_STORAGE}/"
    rsync_err="$?"
    [ $(du -s "${OUTDIR_INGESTFILE}/${mediaid}" | awk '{print $1}') = "0" ] && rm -r "${OUTDIR_INGESTFILE}/${mediaid}"
    report -dt "STATUS Done. Final package has been delivered to ${AIP_STORAGE}/${mediaid}"
fi
if [ "${cleanup}" == "Y" ] ; then
    if [ "${rsync_err}" -gt "0" ] ; then
        report -wt "Cancelling requested deletion of source file, not looking safe."
    else
        report -dt "Removing the source file from ${input} as requested."
        _run rm -f "${input}"
    fi
fi

# clean up queue
[ "${priority}" == "put in queue" ] && remove_mediaid_from_queue

_log -e
