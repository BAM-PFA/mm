#!/usr/bin/env bash
SCRIPTNAME=$(basename "${0}")
SCRIPTDIR=$(dirname "${0}")
MM_CONFIG_FILE="${SCRIPTDIR}/mm.conf"

. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
. ${MM_CONFIG_FILE} || { echo "Missing '${MM_CONFIG_FILE}/mmfunctions'. Exiting." ; exit 1 ;};

_usage(){
cat << EOF; 
Takes an input file, calculates a video fingerprint for specified portion, and compares results to fingerprint database
Usage: ${0} [ -h ] [ -i ] [ -o ] inputfile1 | inputfile2
-h Display this help
-i Set input time in seconds for fingerprint comparison
-o Set output time in seconds for fingerprint comparison
EOF
exit
}

OPTIND=1
while getopts "hi:o:" OPT ; do
    case "${OPT}" in
        i) INTIME="${OPTARG}" ;;
        o) OUTTIME="${OPTARG}" ;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

if ! [ "${1}" ] ; then
    _usage
fi
    

while [ "${*}" != "" ] ; do
    INPUT="${1}"
    shift
    IO=$(mktemp)
    TEMPFINGERPRINT=$(mktemp)
    TEMPFINGERPRINT_SORTED=$(mktemp)
    RESULTS=$(mktemp)
    echo "file '${INPUT}'" > "${IO}"
    if [ -n "${INTIME}" ] ; then
        if ! [[ "${INTIME}" =~ ^-?[0-9]+$ ]] ; then
            echo 'Please use an integer value for input time' && exit 0
        else
            echo "inpoint ${INTIME}" >> "${IO}"
        fi
    fi
    if [ -n "${OUTTIME}" ]; then
        if ! [[ "${OUTTIME}" =~ ^-?[0-9]+$ ]] ; then
            echo 'Please use an integer value for output time' && exit 0
        else
            if [ -n "${INTIME}" ] && ! [ "${OUTTIME}" -gt "${INTIME}" ] ; then
                echo "Error! Output time must be greater than input time!" && exit 1
            else 
                echo "outpoint ${OUTTIME}" >> "${IO}"
            fi
        fi
    fi
    ffmpeg -f concat -safe 0 -i "${IO}" -vf signature=format=xml:filename="${TEMPFINGERPRINT}" -map 0:v -f null -
    xml sel -N "m=urn:mpeg:mpeg7:schema:2001" -t -m "m:Mpeg7/m:DescriptionUnit/m:Descriptor/m:VideoSignatureRegion/m:VSVideoSegment" -v m:StartFrameOfSegment -o ':' -v m:EndFrameOfSegment -o ':' -m m:BagOfWords -v "translate(.,' ','')" -o ':' -b -n "${TEMPFINGERPRINT}" > "${TEMPFINGERPRINT_SORTED}"
    
    (IFS=$'\n'
    for i in $(cat "${TEMPFINGERPRINT_SORTED}") ; do
        hash1=$(echo "${i}" | cut -d':' -f3)
        hash2=$(echo "${i}" | cut -d':' -f4)
        hash3=$(echo "${i}" | cut -d':' -f5)
        hash4=$(echo "${i}" | cut -d':' -f6)
        echo "SELECT objectIdentifierValue,startframe,endframe FROM fingerprints WHERE hash1='${hash1}' AND hash2='${hash2}' AND (hash3='${hash3}' OR hash4='${hash4}')" | mysql --login-path="${PREMIS_PROFILE}"  "${PREMIS_NAME}" | tr '\t' ' ' | grep -v "objectIdentifierValue" >> "${RESULTS}"
    done)
    echo
    echo "Potential matches were found in the following frame ranges:"
    echo
    
    while read RESULT ; do
    RESULTNAME=$(echo "$RESULT" | cut -d' ' -f1)
    INFRAME=$(echo "$RESULT" | cut -d' ' -f2)
    OUTFRAME=$(echo "$RESULT" | cut -d' ' -f3)

    if ! [[ "${RESULTNAME}" = "${LASTRESULTNAME}" ]] ; then
        if [ -n "${FINALOUT}" ] ; then
            echo "Out ${FINALOUT}"
            echo
            FINALOUT=''
        fi
        LASTRESULTNAME=$(echo "$RESULT" | cut -d' ' -f1)
        LASTOUTFRAME=''
        LASTINFRAME=''
        echo "${LASTRESULTNAME}"
        echo "------"
    fi
    if [[ ${INFRAME} -lt ${LASTINFRAME} ]] ; then
        if ! [ "${NEWIN}" = "1" ] ; then
            echo "Out ${FINALOUT}"
        fi
        LASTOUTFRAME=''
        LASTINFRAME=''
    fi
    if [ -z "${LASTINFRAME}" ] ; then
        LASTINFRAME="${INFRAME}"
        NEWIN=1
    fi
    if [ -z "${LASTOUTFRAME}" ] ; then
        LASTOUTFRAME="${OUTFRAME}"
    fi
    if  [ "${NEWIN}" = "1" ] ; then
        echo "In ${INFRAME}"
        NEWIN=''
    fi
    if [[ "${OUTFRAME}" -gt $(( ${LASTOUTFRAME} + 500 )) ]] ; then
        LASTOUTFRAME="${OUTFRAME}"
        NEWIN='1'
        echo "Out ${LASTOUTFRAME}"
    fi
    FINALOUT="${OUTFRAME}"
    
    done < <(cat "${RESULTS}" | sort -u)
    echo "Out ${FINALOUT}"
    cat "${RESULTS}" | sort -u > ~/Desktop/test.txt
done
