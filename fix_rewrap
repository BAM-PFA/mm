#!/bin/bash
# this script takes one argument which is a video file. It then rewraps it to make a new file.
# version 1.2 swap from ffmbc to ffmpeg
version=1.2
unset dependencies
dependencies=(ffmpeg ffprobe)

scriptdir=$(dirname "${0}")
. "${scriptdir}/mmfunctions" || { echo "Missing '${scriptdir}/mmfunctions'. Exiting." ; exit 1 ;};

usage(){
    echo
    echo "$(basename "${0}") ${version}"
    echo "This application takes an input video file(s) and produces outputs through re-multiplexing all tracks of the input into a new container."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename "${0}") file1 [ file2 ...]"
    echo
    exit
}
[ "${#}" = 0 ] && usage
check_dependencies "${dependencies[@]}"

cleanup(){
    _log -a "Process aborted"
    exit 1
}

# local variables
suffix="_rewrap"

trap cleanup SIGHUP SIGINT SIGTERM
_log -b

while [ "${*}" != "" ] ; do

    sourcefile="${1}"
    name=$(basename "${sourcefile}")

    get_codectagstring
    unset ffmpeg_opts
    ffmpeg_opts+=(-map 0:v -map 0:a -c:v copy -c:a copy)
    if [ "${codec_tag_string}" = "mpeg" ] ; then
        extension="mxf"
    else
        extension="mov"
    fi

    output_movie="${sourcefile%.*}${suffix}.${extension}"
    if [ -f "${output_movie}" ] ; then
        report -wt "The intended output of $(basename "${0}") already exists. Skipping for now. Please delete ${output_movie} and rerun or figure out why you are trying to do this."
    else
        report -dt "Generating ${output_movie} ... with these options ${ffmpeg_opts[*]}"
        ffmpeg -i "${sourcefile}" "${ffmepg_opts[@]}" "${output_movie}"
        report -dt "$(basename "${0}") is done with ${name}."
    fi
    shift
done
_log -e
