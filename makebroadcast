#!/bin/bash
# makebroadcast
# make broadcast version


# command-line options to set mediaid and original variables
while getopts l opt ; do
	case $opt in
		l)
		audioleft="Y"
		shift ;;
	esac
done

version="1.0"

scriptdir=`dirname "$0"`
. "$scriptdir/variables"
. "$scriptdir/functions"
[ ! -f "$scriptdir/variables" -o ! -f "$scriptdir/functions" ] && { echo "Missing '$scriptdir/variables' and/or '$scriptdir/functions'. Exiting." ; exit 1 ;};


[ "$audioleft" == "Y" ] && audiomapping=" -map_audio_channel 0:1:0:0:1:0 -map_audio_channel 0:1:0:0:1:1 "

[ "$#" = 0 ] && { ask_input ; once="y" ;};

while [ "$*" != ""  -o "$once" = "y" ] ; do
	once="n"
	[ "$#" != 0 ] && input="$1"
    [ -d "$input" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    [ -f "$input" ] && { outputdir=`dirname "$input"`"/service" && logdir="`dirname "$input"`/access/logs" ;};
    [ ! "$outputdir" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
	find_input "$input"

	filename=`basename "$sourcefile"`
    mediaid=`basename "$input" | cut -d. -f1`
	
    servicefile="$outputdir/${mediaid%.*}.mov"
    [ -s "$servicefile" ] && { report "${RED}WARNING $servicefile already exists, skipping transcode${NC}" && exit;};

    report "${GREEN}STATUS Transcoding for Omneon compliance.${NC}"
    ffmbc_opts=" -r ntsc "
    ffmbc_opts+=" $audiomapping -ac 2 "
    
    get_codectagstring "$sourcefile"
    get_width "$sourcefile"
    [[ "$width" -gt 720 ]] && { target="xdcamhd422" && ffmbc_opts+=" -tff -s 1920x1080 -vtag xd5b ";};
    [[ "$width" -gt 720 ]] || target="imx50"

    [ "$codec_tag_string" = "xd5b" -o "$codec_tag_string" = "mx3n" -o "$codec_tag_string" = "mx5n" ] && ffmbc_opts+=" -vcodec copy -target $target "
    [ "$codec_tag_string" = "xd5b" -o "$codec_tag_string" = "mx3n" -o "$codec_tag_string" = "mx5n" ] || ffmbc_opts+=" -target $target "
    
    mkdir -p "$outputdir"
    ffmbc_command="ffmbc -y -threads 8 -i '$sourcefile' $ffmbc_opts '$servicefile'"
    report "${GREEN}Running: $ffmbc_command"
	eval "$ffmbc_command" 
    ffmbc_err="$?"
    [ "$ffmbc_err" -gt "0" ] && { report "${RED}ffmbc failed with error ${ffmbc_err}${NC}" && exit 1;};
    shift
done