#!/bin/bash
# makebroadcast
# make broadcast version

scriptdir=$(dirname "$0")
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};

# command line arguments
OPTIND=1
while getopts lc opt ; do
    case $opt in
        l) audiomapping=(-map_audio_channel 0:1:0:0:1:0 -map_audio_channel 0:1:0:0:1:1) ;;
        r) audiomapping=(-map_audio_channel 0:1:1:0:1:0 -map_audio_channel 0:1:1:0:1:1) ;;
        c) cropdetect="Y" ;;
        f) input="$OPTARG" ; once="y" ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

[ "$#" = 0 -a ! "$input" ] && { ask_input ; once="y" ;};

version="1.2"
# history
# v 1.1 change from mov output to mxf output, force all output to hd
# v 1.2 revert to mov and ffmbc

cleanup(){
    log -a "Process aborted"
    exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM

while [ "$*" != ""  -o "$once" = "y" ] ; do
    once="n"
    
    # clear local arrays
    unset audiomapping
    unset inputoptions
    unset ffmbc_opts
    
    [ "$#" != 0 ] && input="$1"
    [ -d "$input" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    [ -f "$input" ] && { outputdir=$(dirname "$input")"/service" && logdir="$(dirname "$input")/service/logs" ;};
    [ ! "$outputdir" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    find_input "$input"

    filename=$(basename "$sourcefile")
    mediaid=$(basename "$input" | cut -d. -f1)

    log -b

    servicefile="$outputdir/${mediaid%.*}.mov"
    [ -s "$servicefile" ] && { report -wt "$servicefile already exists, skipping transcode" ; shift ; continue ;};

    report -dt "Starting transcode of $(basename $sourcefile) for broadcast compliance."
    
    # set fixed transcoding options
    ffmbc_opts+=(-r ntsc)
    ffmbc_opts+=(-tff)
    ffmbc_opts+=(-threads 4)
    
    if [ -n "$audiomapping" ] ; then
        ffmbc_opts+=($audiomapping)
    else
        has_first_two_tracks_mono "$sourcefile"
        if [ "$MULTIMONO" = "Y" ] ; then
            report -wt "The first two audio tracks are both mono. Considering track 1 for left and track 2 for right."
            audiomapping=(-map_audio_channel 0.1:0:0.1:0 -map_audio_channel 0.2:0:0.1:1)
            ffmbc_opts+=($audiomapping)
        fi
    fi
    # decide on an output codec, aspect ratio, and padding strategy
    get_sar "$sourcefile"
    if [ "$cropdetect" = "Y" ] ; then
        get_cropdetection "$sourcefile"
        filterchain_start="${CROPADJ},"
        width=$(echo "$CROPADJ" | cut -d= -f2 | cut -d: -f1)
        height=$(echo "$CROPADJ" | cut -d= -f2 | cut -d: -f2)
        dar="(${width}/${height})*${sar}"
    else
        get_width "$sourcefile"
        get_height "$sourcefile"
        get_dar "$sourcefile"
    fi
    get_fieldorder "$sourcefile"
    if [ "$fieldorder" = "bff" ] ; then
        filterchain_start+="fieldorder=tff,"
    fi
    darratio=$(echo "scale=3 ; $dar" | bc)
    if [ "$width" = "1920" -a "$height" = "1080" -a ! "$cropdetect" = "Y" ] ; then
        echo yep
        ffmbc_opts+=(-target xdcamhd422)
        ffmbc_opts+=(-vtag xd5b)
        ffmbc_opts+=(-aspect 16:9)
    elif [ $(echo "scale=5 ; $darratio > (16/9)" | bc -l) = 1 ] ; then
        ffmbc_opts+=(-vf "${filterchain_start}pad=${width}:${width}*(9/16)*(${sar}):(ow-${width})/2:(oh-${height})/2,scale=1920:1080:interl=1")
        ffmbc_opts+=(-target xdcamhd422)
        ffmbc_opts+=(-vtag xd5b)
        ffmbc_opts+=(-aspect 16:9)
    elif [ $(echo "scale=5 ; $darratio > (3/2)" | bc -l) = 1 ] ; then
        ffmbc_opts+=(-vf "${filterchain_start}pad=${height}*(16/9)/(${sar}):${height}:(ow-${width})/2:(oh-${height})/2,scale=1920:1080:interl=1")
        ffmbc_opts+=(-target xdcamhd422)
        ffmbc_opts+=(-vtag xd5b)
        ffmbc_opts+=(-aspect 16:9)
    elif [ "$width" = "720" -a "$height" = "480" -a $(echo "scale=5 ; $darratio < (3/2)" | bc -l) = 1 -a ! "$cropdetect" = "Y" ] ; then
        filterchain_start=$(echo "$filterchain_start" | sed 's/,$//g')
        ffmbc_opts+=(-vf ${filterchain_start})
        ffmbc_opts+=(-target imx30)
        ffmbc_opts+=(-aspect 4:3)
    elif [ "${height}" -eq "486" -a "${width}" -eq "720" ] ; then
        filterchain_start+="crop=720:480:0:4"
        filterchain_start=$(echo "$filterchain_start" | sed 's/,$//g')
        ffmbc_opts+=(-vf ${filterchain_start})
        ffmbc_opts+=(-target imx30)
        ffmbc_opts+=(-aspect 4:3)
    elif  [ "${height}" -eq "512" -a "${width}" -eq "720" ] ;then
        filterchain_start+="crop=720:480:0:32"
        filterchain_start=$(echo "$filterchain_start" | sed 's/,$//g')
        ffmbc_opts+=(-vf ${filterchain_start})
        ffmbc_opts+=(-target imx30)
        ffmbc_opts+=(-aspect 4:3)
    else
        ffmbc_opts+=(-vf "${filterchain_start}pad=${height}*(4/3)/(${sar}):${height}:(ow-${width})/2:(oh-${height})/2,scale=720:480:interl=1")
        ffmbc_opts+=(-target imx30)
        ffmbc_opts+=(-aspect 4:3)
    fi

    # add audio options
    ffmbc_opts+=(-acodec pcm_s24le)
    ffmbc_opts+=(-ar 48k)
    ffmbc_opts+=(-ac 2)

    # set input options for ffmbc
    inputoptions+=(-y)
    inputoptions+=(-threads 8)
    inputoptions+=(-loglevel verbose)
    
    mkdir -p "$outputdir"
    # log ffmbc process
    if [ "$logdir" != "" ] ; then
        mkdir -p "$logdir"
        reportfile="ffmbc_$(date '+%Y%m%d-%H%M%S')_$(basename $0)_${version}.txt"
        echo "ffmbc started on $(date '+%F at %T')" > "${logdir}/${reportfile}"
        echo "Report written to \"${reportfile}\"" >> "${logdir}/${reportfile}"
        echo "Command line:" >> "${logdir}/${reportfile}"
    fi
    echo "ffmbc ${inputoptions[@]} -i ${sourcefile} ${ffmbc_opts[@]} ${servicefile}" >> "${logdir}/${reportfile}"
    ffmbc ${inputoptions[@]} -i ${sourcefile} ${ffmbc_opts[@]} ${servicefile}
    ffmbc_err="$?"
    [ "$ffmbc_err" -gt "0" ] && { report -wt "ffmbc failed with error ${ffmbc_err}" && exit 1;};
    shift
done
log -e
