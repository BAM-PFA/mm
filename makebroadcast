#!/bin/bash
# makebroadcast
# v 1.1 change from mov output to mxf output, force all output to hd
# v 1.2 revert to mov and ffmbc
# v 1.3 revert back to ffmpeg
# v 1.4 adjust handling volume adjustment argument
VERSION="1.4"
VOLADJUST="Y"
SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
DEPENDENCIES=(ffmpeg ffprobe)
_initialize_make
SUFFIX=""
EXTENSION="mov"
RELATIVEPATH="service"

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This application will create a file suitable for broadcast or editing from a video file or package input with the following options."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename "${0}") [ -l ] [ -r ] [ -c ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -F (apply a formula, override default settings)"
    echo "  -l (only use the left channel of the first audio track)"
    echo "  -r (only use the right channel of the first audio track)"
    echo "  -c (run the video through a crop detection filter, then crop the video accordingly during transcoding, slower)"
    echo "  -v Y|N (run the video through a volume adjustment filter, then adjust the volume accordingly during transcoding, slower). Defaults to ${VOLADJUST}."
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && _usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":F:lrcv:o:d:e:E:nh" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}";;
        l) AUDIOMAP="L";;
        r) AUDIOMAP="R";;
        c) CROPDETECT="Y" ;;
        v) VOLADJUST="${OPTARG}";;
        o) OUTPUTDIR_FORCED="${OPTARG}" && _check_outputdir_forced ;;
        d) DELIVERDIR="${OPTARG}" && _check_deliverdir ;;
        e) EMAILADDRESS_DELIVERY="${OPTARG}" && check_emailaddress "${EMAILADDRESS_DELIVERY}" ;;
        E) EMAILADDRESS_OUTCOME="${OPTARG}" && check_emailaddress "${EMAILADDRESS_OUTCOME}" ;;
        n) DRYRUN=true;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    # get context about the input
    INPUT="${1}"
    shift
    if [ -z "${OUTPUTDIR_FORCED}" ] ; then
        [ -d "${INPUT}" ] && { OUTPUTDIR="${INPUT}/objects/${RELATIVEPATH}" && LOGDIR="${INPUT}/metadata/submissionDocumentation/logs" ;};
        [ -f "${INPUT}" ] && { OUTPUTDIR=$(dirname "${INPUT}")"/${RELATIVEPATH}" && LOGDIR="$(dirname "${INPUT}")/${RELATIVEPATH}/logs" ;};
        [ ! "${OUTPUTDIR}" ] && { OUTPUTDIR="${INPUT}/objects/${RELATIVEPATH}" && LOGDIR="${INPUT}/metadata/submissionDocumentation/logs" ;};
    else
        OUTPUTDIR="${OUTPUTDIR_FORCED}"
        LOGDIR="${OUTPUTDIR}/logs"
    fi
    _find_input "${INPUT}"
    MEDIAID=$(basename "${INPUT}" | cut -d. -f1)
    INGESTLOG="${LOGDIR}/capture.log"

    _set_up_output

    # clear local arrays
    INTIME=""
    OUTTIME=""
    audio_adjustment=""
    unset INPUTOPTIONS
    unset MIDDLEOPTIONS
    unset MIDDLEOPTIONSXDCAM
    unset MIDDLEOPTIONSIMX
    unset AUDIOMAPPING_FFMPEG
    FILTERCHAIN_START=""
    _get_videostreamcount "${SOURCEFILE}"
    _get_audiostreamcount "${SOURCEFILE}"


    if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
        # get information on the input
        _get_sar "${SOURCEFILE}"
        if [ "${CROPDETECT}" = "Y" ] ; then
            _get_cropdetection "${SOURCEFILE}"
            FILTERCHAIN_START="${FILTERCHAIN_START}${CROPADJ},"
            WIDTH=$(echo "${CROPADJ}" | cut -d= -f2 | cut -d: -f1)
            HEIGHT=$(echo "${CROPADJ}" | cut -d= -f2 | cut -d: -f2)
            DAR="(${WIDTH}/${HEIGHT})*${SAR}"
        else
            _get_width "${SOURCEFILE}"
            _get_height "${SOURCEFILE}"
            _get_dar "${SOURCEFILE}"
        fi

        # set in and out times if used
        if [[ -f "${INGESTLOG}" && "${ISOBJECT}" = "Y" ]] ; then
            if [ ! "${FORMULA}" ] ; then
                FORMULA=$(_readingestlog "FORMULA")
            fi
            INTIME=$(_readingestlog "intime")
            OUTTIME=$(_readingestlog "outtime")
            if [[ "${INTIME}" ]] ; then
                _report -dt "ATTENTION: Transcoding will use intime (${INTIME}) during transcoding."
                INPUTOPTIONS+=(-seek_timestamp 1)
                MIDDLEOPTIONS+=(-ss "${INTIME}")
            fi
            if [[ "${OUTTIME}" ]] ; then
                _report -dt "ATTENTION: Transcoding will use outtime (${OUTTIME}) during transcoding."
                MIDDLEOPTIONS+=(-to "${OUTTIME}")
            fi
        fi

        #options for either xdcam or imx
        MIDDLEOPTIONS+=(-r ntsc)
        MIDDLEOPTIONS+=(-c:v mpeg2video)
        MIDDLEOPTIONS+=(-intra_vlc 1)
        MIDDLEOPTIONS+=(-non_linear_quant 1)
        MIDDLEOPTIONS+=(-qmin 1)
        MIDDLEOPTIONS+=(-dc 10)
        MIDDLEOPTIONS+=(-lmin QP2LAMBDA)
        MIDDLEOPTIONS+=(-ps 1)
        MIDDLEOPTIONS+=(-flags +ildct+ilme)
        MIDDLEOPTIONS+=(-pix_fmt yuv422p)
        MIDDLEOPTIONS+=(-metadata:s:v:0 timecode=00:00:00.00)

        #xdcam options
        MIDDLEOPTIONSXDCAM+=(-s 1920x1080)
        MIDDLEOPTIONSXDCAM+=(-vtag xd5b)
        MIDDLEOPTIONSXDCAM+=(-aspect 16:9)
        MIDDLEOPTIONSXDCAM+=(-q:v 1)
        MIDDLEOPTIONSXDCAM+=(-qmax 8)
        MIDDLEOPTIONSXDCAM+=(-g 15)
        MIDDLEOPTIONSXDCAM+=(-bf 2)
        MIDDLEOPTIONSXDCAM+=(-b:v 50M)
        MIDDLEOPTIONSXDCAM+=(-maxrate:v 50M)
        MIDDLEOPTIONSXDCAM+=(-minrate:v 50M)
        MIDDLEOPTIONSXDCAM+=(-bufsize 17825792)
        MIDDLEOPTIONSXDCAM+=(-rc_init_occupancy 17825792)

        # imx options
        MIDDLEOPTIONSIMX+=(-aspect 4:3)
        MIDDLEOPTIONSIMX+=(-qmax 12)
        MIDDLEOPTIONSIMX+=(-g 1)
        MIDDLEOPTIONSIMX+=(-top 1)
        MIDDLEOPTIONSIMX+=(-intra)
        MIDDLEOPTIONSIMX+=(-b:v 30M)
        MIDDLEOPTIONSIMX+=(-maxrate:v 30M)
        MIDDLEOPTIONSIMX+=(-minrate:v 30M)
        MIDDLEOPTIONSIMX+=(-bufsize 1001000)
        MIDDLEOPTIONSIMX+=(-rc_init_occupancy 1001000)
        MIDDLEOPTIONSIMX+=(-rc_max_vbv_use 1)
        MIDDLEOPTIONSIMX+=(-rc_min_vbv_use 1)
        MIDDLEOPTIONSIMX+=(-rc_buf_aggressivity 0.25)
        MIDDLEOPTIONSIMX+=(-vbsf imxdump)
        MIDDLEOPTIONSIMX+=(-tag:v mx3n)

        # decide on an output codec, aspect ratio, and padding strategy
        DARRATIO=$(echo "scale=3 ; ${DAR}" | bc)
        if [ "${FORMULA}" = "tff" ] ; then
            FILTERCHAIN_START="${FILTERCHAIN_START}setfield=tff,"
        elif [ "${FORMULA}" = "bff" ] ; then
            FILTERCHAIN_START="${FILTERCHAIN_START}setfield=bff,"
        fi
        _get_fieldorder "${SOURCEFILE}"
        if [ "${FIELDORDER}" != "tff" ] ; then
            FILTERCHAIN_START="${FILTERCHAIN_START}fieldorder=tff,"
        fi
        if [ "${FORMULA}" = "hds" ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}scale=size=hd1080:interl=1,format=yuv422p,setsar=1/1,setdar=16/9,fps=fps=ntsc")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
        elif [ "${FORMULA}" = "sds" ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}scale=720:480,pad=720:512:0:24,setsar=1/1,setdar=4/3")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
        elif [ "${DARRATIO}" = "1.777" -a ! "${CROPDETECT}" = "Y" ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}scale=size=hd1080:interl=1,format=yuv422p,setsar=1/1,setdar=16/9,fps=fps=ntsc")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
        elif [ $(echo "scale=3 ; ${DARRATIO} > (16/9)" | bc -l) = 1 ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}pad=${WIDTH}:${WIDTH}*(9/16)*(${SAR}):(ow-${WIDTH})/2:(oh-${HEIGHT})/2,scale=size=hd1080:interl=1")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
        elif [ $(echo "scale=3 ; $DARRATIO > (3/2)" | bc -l) = 1 ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}pad=${HEIGHT}*(16/9)/(${SAR}):${HEIGHT}:(ow-${WIDTH})/2:(oh-${HEIGHT})/2,scale=size=hd1080:interl=1")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
        elif [ "${WIDTH}" = "720" -a "${HEIGHT}" = "480" -a $(echo "scale=3 ; ${DARRATIO} < (3/2)" | bc -l) = 1 -a ! "${CROPDETECT}" = "Y" ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}"pad=720:512:0:24,setsar=1/1,setdar=4/3)
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
        elif [ "${HEIGHT}" -eq "486" -a "${WIDTH}" -eq "720" ] ; then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}crop=720:480:0:4,pad=720:512:0:24,setsar=1/1,setdar=4/3")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
        elif  [ "${HEIGHT}" -eq "512" -a "${WIDTH}" -eq "720" ] ;then
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}crop=720:480:0:32,pad=720:512:0:24,setsar=1/1,setdar=4/3")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
        else
            VIDEOFILTERCHAIN+=("${FILTERCHAIN_START}scale=720:480,pad=720:512:0:24,setsar=1/1,setdar=4/3")
            MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
        fi
    fi

    if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
        _get_audio_index "${SOURCEFILE}"
        if [ "${AUDIOMAP}" = "L" ] ; then
            AUDIOMAPPING_FFMPEG=(-map_channel 0.${AUDIO_INDEX_1}.0)
        elif [ "${AUDIOMAP}" = "R" ] ; then
            AUDIOMAPPING_FFMPEG=(-map_channel 0.${AUDIO_INDEX_1}.1)
        else
            _get_audio_mapping "${SOURCEFILE}"
        fi
        MIDDLEOPTIONS+=("${AUDIOMAPPING_FFMPEG[@]}")
        # add audio options
        MIDDLEOPTIONS+=(-acodec pcm_s24be)
        MIDDLEOPTIONS+=(-ar 48k)
        MIDDLEOPTIONS+=(-ac 2)
    fi

    # set input options for ffmpeg
    _get_codectagstring "${SOURCEFILE}"
    INPUTOPTIONS+=(-y)
    INPUTOPTIONS+=(-nostdin)
    if [[ "${CODEC_TAG_STRING}" == "mjp2" ]] ; then
         INPUTOPTIONS+=(-vcodec libopenjpeg)
    fi

    # log process
    _prep_ffmpeg_log
    _prep_volume_adjustment
    if [ "${CONCATSOURCE}" != "" ] ; then
        FFMPEGINPUT="${CONCATSOURCE}"
    else
        FFMPEGINPUT="${SOURCEFILE}"
    fi
    
    if [ -n  "${VIDEOFILTERCHAIN}" -a -n "${AUDIOFILTERCHAIN}" ] ; then
           MIDDLEOPTIONS+=(-filter_complex ${VIDEOFILTERCHAIN}\;${AUDIOFILTERCHAIN})
       elif [ -n  "${VIDEOFILTERCHAIN}" ] ; then 
           MIDDLEOPTIONS+=(-filter_complex ${VIDEOFILTERCHAIN})
       elif [ -n  "${AUDIOFILTERCHAIN}" ] ; then 
           MIDDLEOPTIONS+=(-filter_complex ${AUDIOFILTERCHAIN})
       fi
    
    _run_critical ffmpeg "${INPUTOPTIONS[@]}" -i "${FFMPEGINPUT}" "${MIDDLEOPTIONS[@]}" "${OUTPUT}"
    echo
    _summarize_make
    _deliver_output "${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
    _log -e
done
