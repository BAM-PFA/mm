#!/bin/bash
# makebroadcast
# make broadcast version

scriptdir=$(dirname "$0")
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};

# command-line options to set mediaid and original variables
OPTIND=1
while getopts lc opt ; do
    case $opt in
        l) audiomapping=" -map_audio_channel 0:1:0:0:1:0 -map_audio_channel 0:1:0:0:1:1 " ;;
        r) audiomapping=" -map_audio_channel 0:1:1:0:1:0 -map_audio_channel 0:1:1:0:1:1 " ;;
        c) cropdetect="Y" ;;
        f) input="$OPTARG" ; once="y" ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

[ "$#" = 0 -a ! "$input" ] && { ask_input ; once="y" ;};

version="1.2"
# history
# v 1.1 change from mov output to mxf output, force all output to hd
# v 1.2 revert to mov and ffmbc

cleanup(){
    log -a "Process aborted"
    exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM

while [ "$*" != ""  -o "$once" = "y" ] ; do
    once="n"
    [ "$#" != 0 ] && input="$1"
    [ -d "$input" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    [ -f "$input" ] && { outputdir=$(dirname "$input")"/service" && logdir="$(dirname "$input")/service/logs" ;};
    [ ! "$outputdir" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
    find_input "$input"

    filename=$(basename "$sourcefile")
    mediaid=$(basename "$input" | cut -d. -f1)

    log -b

    servicefile="$outputdir/${mediaid%.*}.mov"
    [ -s "$servicefile" ] && { report -wt "$servicefile already exists, skipping transcode" ; shift ; continue ;};

    report -dt "Starting transcode of $(basename $sourcefile) for broadcast compliance."
    ffmpeg_opts=" -r ntsc"
    if [ -n "$audiomapping" ] ; then
        ffmpeg_opts+=" $audiomapping"
    else
        has_first_two_tracks_mono "$sourcefile"
        if [ "$MULTIMONO" = "Y" ] ; then
            report -wt "The first two audio tracks are both mono. Considering track 1 for left and track 2 for right."
            audiomapping=" -map_audio_channel 0.1:0:0.1:0 -map_audio_channel 0.2:0:0.1:1 "
            ffmpeg_opts+=" $audiomapping"
        fi
    fi
    if [ "$cropdetect" = "Y" ] ; then
        get_cropdetection "$sourcefile"
        filterchain_start="${CROPADJ},"
    fi
    # decide on an output codec
    get_dar "$sourcefile"
    darratio=$(echo "scale=3 ; $dar" | bc)
    if [ $(echo "scale=5 ; $darratio > 1.5" | bc -l) = 1 ] ; then
        ffmpeg_opts+=" -vf '${filterchain_start}pad=ih*16/9/sar:ih:(ow-iw)/2:(oh-ih)/2,scale=1920:1080:interl=1'"
        ffmpeg_opts+=" -target xdcamhd422 -vtag xd5b -tff -aspect 16:9 -threads 4"
    else
        ffmpeg_opts+=" -vf '${filterchain_start}pad=ih*4/3/sar:ih:(ow-iw)/2:(oh-ih)/2,scale=720:480:interl=1'"
        ffmpeg_opts+=" -target imx30 -tff -aspect 4:3 -threads 4"
    fi

    # add audio options
    ffmpeg_opts+=" -acodec pcm_s24le -ar 48k -ac 2"

    # set input options for ffmpeg
    inputoptions=" -y"
    inputoptions+=" -threads 8"
    inputoptions+=" -loglevel verbose"
    mkdir -p "$outputdir"
    ffmpeg_command="ffmbc $inputoptions -i \"$sourcefile\" $ffmpeg_opts \"$servicefile\""
    # log ffmpeg process
    if [ "$logdir" != "" ] ; then
        mkdir -p "$logdir"
        reportfile="ffmbc_$(date '+%Y%m%d-%H%M%S')_$(basename $0)_${version}.txt"
        echo "ffmbc started on $(date '+%F at %T')" > "${logdir}/${reportfile}"
        echo "Report written to \"${reportfile}\"" >> "${logdir}/${reportfile}"
        echo "Command line:" >> "${logdir}/${reportfile}"
    fi
    report -dt "Running: ${ffmpeg_command}"
    echo "$ffmpeg_command" >> "${logdir}/${reportfile}"
    eval "$ffmpeg_command"
    ffmpeg_err="$?"
    [ "$ffmpeg_err" -gt "0" ] && { report -wt "ffmpeg failed with error ${ffmpeg_err}" && exit 1;};
    shift
done
log -e
